<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report-3.0.xsd" version="3.0" name="notes.EndpointTest" time="11.481" tests="13" errors="0" skipped="0" failures="0">
  <properties>
    <property name="java.specification.version" value="19"/>
    <property name="sun.cpu.isalist" value="amd64"/>
    <property name="sun.jnu.encoding" value="Cp1252"/>
    <property name="java.class.path" value="C:\Users\acm11\Dev\CA-3-NoteWebPage-Backend\target\test-classes;C:\Users\acm11\Dev\CA-3-NoteWebPage-Backend\target\classes;C:\Users\acm11\.m2\repository\io\javalin\javalin\5.5.0\javalin-5.5.0.jar;C:\Users\acm11\.m2\repository\org\slf4j\slf4j-api\2.0.7\slf4j-api-2.0.7.jar;C:\Users\acm11\.m2\repository\org\eclipse\jetty\jetty-server\11.0.15\jetty-server-11.0.15.jar;C:\Users\acm11\.m2\repository\org\eclipse\jetty\toolchain\jetty-jakarta-servlet-api\5.0.2\jetty-jakarta-servlet-api-5.0.2.jar;C:\Users\acm11\.m2\repository\org\eclipse\jetty\jetty-http\11.0.15\jetty-http-11.0.15.jar;C:\Users\acm11\.m2\repository\org\eclipse\jetty\jetty-util\11.0.15\jetty-util-11.0.15.jar;C:\Users\acm11\.m2\repository\org\eclipse\jetty\jetty-io\11.0.15\jetty-io-11.0.15.jar;C:\Users\acm11\.m2\repository\org\eclipse\jetty\jetty-webapp\11.0.15\jetty-webapp-11.0.15.jar;C:\Users\acm11\.m2\repository\org\eclipse\jetty\jetty-servlet\11.0.15\jetty-servlet-11.0.15.jar;C:\Users\acm11\.m2\repository\org\eclipse\jetty\jetty-security\11.0.15\jetty-security-11.0.15.jar;C:\Users\acm11\.m2\repository\org\eclipse\jetty\jetty-xml\11.0.15\jetty-xml-11.0.15.jar;C:\Users\acm11\.m2\repository\org\eclipse\jetty\websocket\websocket-jetty-server\11.0.15\websocket-jetty-server-11.0.15.jar;C:\Users\acm11\.m2\repository\org\eclipse\jetty\websocket\websocket-jetty-common\11.0.15\websocket-jetty-common-11.0.15.jar;C:\Users\acm11\.m2\repository\org\eclipse\jetty\websocket\websocket-core-common\11.0.15\websocket-core-common-11.0.15.jar;C:\Users\acm11\.m2\repository\org\eclipse\jetty\websocket\websocket-servlet\11.0.15\websocket-servlet-11.0.15.jar;C:\Users\acm11\.m2\repository\org\eclipse\jetty\websocket\websocket-core-server\11.0.15\websocket-core-server-11.0.15.jar;C:\Users\acm11\.m2\repository\org\eclipse\jetty\jetty-annotations\11.0.15\jetty-annotations-11.0.15.jar;C:\Users\acm11\.m2\repository\org\eclipse\jetty\jetty-plus\11.0.15\jetty-plus-11.0.15.jar;C:\Users\acm11\.m2\repository\org\eclipse\jetty\jetty-jndi\11.0.15\jetty-jndi-11.0.15.jar;C:\Users\acm11\.m2\repository\jakarta\annotation\jakarta.annotation-api\2.1.1\jakarta.annotation-api-2.1.1.jar;C:\Users\acm11\.m2\repository\org\ow2\asm\asm\9.5\asm-9.5.jar;C:\Users\acm11\.m2\repository\org\ow2\asm\asm-commons\9.5\asm-commons-9.5.jar;C:\Users\acm11\.m2\repository\org\ow2\asm\asm-tree\9.5\asm-tree-9.5.jar;C:\Users\acm11\.m2\repository\org\eclipse\jetty\websocket\websocket-jetty-api\11.0.15\websocket-jetty-api-11.0.15.jar;C:\Users\acm11\.m2\repository\org\jetbrains\kotlin\kotlin-stdlib-jdk8\1.8.21\kotlin-stdlib-jdk8-1.8.21.jar;C:\Users\acm11\.m2\repository\org\jetbrains\kotlin\kotlin-stdlib\1.8.21\kotlin-stdlib-1.8.21.jar;C:\Users\acm11\.m2\repository\org\jetbrains\kotlin\kotlin-stdlib-common\1.8.21\kotlin-stdlib-common-1.8.21.jar;C:\Users\acm11\.m2\repository\org\jetbrains\kotlin\kotlin-stdlib-jdk7\1.8.21\kotlin-stdlib-jdk7-1.8.21.jar;C:\Users\acm11\.m2\repository\org\slf4j\slf4j-simple\2.0.7\slf4j-simple-2.0.7.jar;C:\Users\acm11\.m2\repository\org\projectlombok\lombok\1.18.28\lombok-1.18.28.jar;C:\Users\acm11\.m2\repository\com\fasterxml\jackson\dataformat\jackson-dataformat-xml\2.16.0\jackson-dataformat-xml-2.16.0.jar;C:\Users\acm11\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.16.0\jackson-core-2.16.0.jar;C:\Users\acm11\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.16.0\jackson-annotations-2.16.0.jar;C:\Users\acm11\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.16.0\jackson-databind-2.16.0.jar;C:\Users\acm11\.m2\repository\org\codehaus\woodstox\stax2-api\4.2.1\stax2-api-4.2.1.jar;C:\Users\acm11\.m2\repository\com\fasterxml\woodstox\woodstox-core\6.5.1\woodstox-core-6.5.1.jar;C:\Users\acm11\.m2\repository\org\postgresql\postgresql\42.6.0\postgresql-42.6.0.jar;C:\Users\acm11\.m2\repository\org\checkerframework\checker-qual\3.31.0\checker-qual-3.31.0.jar;C:\Users\acm11\.m2\repository\org\hibernate\orm\hibernate-core\6.2.4.Final\hibernate-core-6.2.4.Final.jar;C:\Users\acm11\.m2\repository\jakarta\persistence\jakarta.persistence-api\3.1.0\jakarta.persistence-api-3.1.0.jar;C:\Users\acm11\.m2\repository\jakarta\transaction\jakarta.transaction-api\2.0.1\jakarta.transaction-api-2.0.1.jar;C:\Users\acm11\.m2\repository\org\jboss\logging\jboss-logging\3.5.0.Final\jboss-logging-3.5.0.Final.jar;C:\Users\acm11\.m2\repository\org\hibernate\common\hibernate-commons-annotations\6.0.6.Final\hibernate-commons-annotations-6.0.6.Final.jar;C:\Users\acm11\.m2\repository\io\smallrye\jandex\3.0.5\jandex-3.0.5.jar;C:\Users\acm11\.m2\repository\com\fasterxml\classmate\1.5.1\classmate-1.5.1.jar;C:\Users\acm11\.m2\repository\net\bytebuddy\byte-buddy\1.12.18\byte-buddy-1.12.18.jar;C:\Users\acm11\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\4.0.0\jakarta.xml.bind-api-4.0.0.jar;C:\Users\acm11\.m2\repository\jakarta\activation\jakarta.activation-api\2.1.0\jakarta.activation-api-2.1.0.jar;C:\Users\acm11\.m2\repository\org\glassfish\jaxb\jaxb-runtime\4.0.2\jaxb-runtime-4.0.2.jar;C:\Users\acm11\.m2\repository\org\glassfish\jaxb\jaxb-core\4.0.2\jaxb-core-4.0.2.jar;C:\Users\acm11\.m2\repository\org\eclipse\angus\angus-activation\2.0.0\angus-activation-2.0.0.jar;C:\Users\acm11\.m2\repository\org\glassfish\jaxb\txw2\4.0.2\txw2-4.0.2.jar;C:\Users\acm11\.m2\repository\com\sun\istack\istack-commons-runtime\4.1.1\istack-commons-runtime-4.1.1.jar;C:\Users\acm11\.m2\repository\jakarta\inject\jakarta.inject-api\2.0.1\jakarta.inject-api-2.0.1.jar;C:\Users\acm11\.m2\repository\org\antlr\antlr4-runtime\4.10.1\antlr4-runtime-4.10.1.jar;C:\Users\acm11\.m2\repository\org\hamcrest\java-hamcrest\2.0.0.0\java-hamcrest-2.0.0.0.jar;C:\Users\acm11\.m2\repository\io\rest-assured\rest-assured\5.3.2\rest-assured-5.3.2.jar;C:\Users\acm11\.m2\repository\org\apache\groovy\groovy\4.0.11\groovy-4.0.11.jar;C:\Users\acm11\.m2\repository\org\apache\groovy\groovy-xml\4.0.11\groovy-xml-4.0.11.jar;C:\Users\acm11\.m2\repository\org\apache\httpcomponents\httpclient\4.5.13\httpclient-4.5.13.jar;C:\Users\acm11\.m2\repository\org\apache\httpcomponents\httpcore\4.4.13\httpcore-4.4.13.jar;C:\Users\acm11\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar;C:\Users\acm11\.m2\repository\commons-codec\commons-codec\1.11\commons-codec-1.11.jar;C:\Users\acm11\.m2\repository\org\apache\httpcomponents\httpmime\4.5.13\httpmime-4.5.13.jar;C:\Users\acm11\.m2\repository\org\hamcrest\hamcrest\2.2\hamcrest-2.2.jar;C:\Users\acm11\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar;C:\Users\acm11\.m2\repository\io\rest-assured\json-path\5.3.2\json-path-5.3.2.jar;C:\Users\acm11\.m2\repository\org\apache\groovy\groovy-json\4.0.11\groovy-json-4.0.11.jar;C:\Users\acm11\.m2\repository\io\rest-assured\rest-assured-common\5.3.2\rest-assured-common-5.3.2.jar;C:\Users\acm11\.m2\repository\io\rest-assured\xml-path\5.3.2\xml-path-5.3.2.jar;C:\Users\acm11\.m2\repository\org\apache\commons\commons-lang3\3.11\commons-lang3-3.11.jar;C:\Users\acm11\.m2\repository\io\rest-assured\json-schema-validator\5.3.2\json-schema-validator-5.3.2.jar;C:\Users\acm11\.m2\repository\com\github\java-json-tools\json-schema-validator\2.2.14\json-schema-validator-2.2.14.jar;C:\Users\acm11\.m2\repository\com\github\java-json-tools\jackson-coreutils-equivalence\1.0\jackson-coreutils-equivalence-1.0.jar;C:\Users\acm11\.m2\repository\com\github\java-json-tools\jackson-coreutils\2.0\jackson-coreutils-2.0.jar;C:\Users\acm11\.m2\repository\com\github\java-json-tools\msg-simple\1.2\msg-simple-1.2.jar;C:\Users\acm11\.m2\repository\com\github\java-json-tools\btf\1.3\btf-1.3.jar;C:\Users\acm11\.m2\repository\com\github\java-json-tools\json-schema-core\1.2.14\json-schema-core-1.2.14.jar;C:\Users\acm11\.m2\repository\com\github\java-json-tools\uri-template\0.10\uri-template-0.10.jar;C:\Users\acm11\.m2\repository\org\mozilla\rhino\1.7.7.2\rhino-1.7.7.2.jar;C:\Users\acm11\.m2\repository\com\sun\mail\mailapi\1.6.2\mailapi-1.6.2.jar;C:\Users\acm11\.m2\repository\joda-time\joda-time\2.10.5\joda-time-2.10.5.jar;C:\Users\acm11\.m2\repository\com\googlecode\libphonenumber\libphonenumber\8.11.1\libphonenumber-8.11.1.jar;C:\Users\acm11\.m2\repository\com\google\code\findbugs\jsr305\3.0.2\jsr305-3.0.2.jar;C:\Users\acm11\.m2\repository\net\sf\jopt-simple\jopt-simple\5.0.4\jopt-simple-5.0.4.jar;C:\Users\acm11\.m2\repository\com\google\guava\guava\32.0.1-jre\guava-32.0.1-jre.jar;C:\Users\acm11\.m2\repository\com\google\guava\failureaccess\1.0.1\failureaccess-1.0.1.jar;C:\Users\acm11\.m2\repository\com\google\guava\listenablefuture\9999.0-empty-to-avoid-conflict-with-guava\listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar;C:\Users\acm11\.m2\repository\com\google\errorprone\error_prone_annotations\2.18.0\error_prone_annotations-2.18.0.jar;C:\Users\acm11\.m2\repository\com\google\j2objc\j2objc-annotations\2.8\j2objc-annotations-2.8.jar;C:\Users\acm11\.m2\repository\org\mindrot\jbcrypt\0.4\jbcrypt-0.4.jar;C:\Users\acm11\.m2\repository\com\nimbusds\nimbus-jose-jwt\9.10\nimbus-jose-jwt-9.10.jar;C:\Users\acm11\.m2\repository\com\github\stephenc\jcip\jcip-annotations\1.0-1\jcip-annotations-1.0-1.jar;C:\Users\acm11\.m2\repository\org\junit\jupiter\junit-jupiter-api\5.7.2\junit-jupiter-api-5.7.2.jar;C:\Users\acm11\.m2\repository\org\apiguardian\apiguardian-api\1.1.0\apiguardian-api-1.1.0.jar;C:\Users\acm11\.m2\repository\org\opentest4j\opentest4j\1.2.0\opentest4j-1.2.0.jar;C:\Users\acm11\.m2\repository\org\junit\platform\junit-platform-commons\1.7.2\junit-platform-commons-1.7.2.jar;C:\Users\acm11\.m2\repository\org\junit\jupiter\junit-jupiter-engine\5.7.2\junit-jupiter-engine-5.7.2.jar;C:\Users\acm11\.m2\repository\org\junit\platform\junit-platform-engine\1.7.2\junit-platform-engine-1.7.2.jar;C:\Users\acm11\.m2\repository\org\junit\jupiter\junit-jupiter-params\5.7.2\junit-jupiter-params-5.7.2.jar;C:\Users\acm11\.m2\repository\org\hamcrest\hamcrest-library\1.3\hamcrest-library-1.3.jar;C:\Users\acm11\.m2\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar;C:\Users\acm11\.m2\repository\org\testcontainers\testcontainers\1.19.5\testcontainers-1.19.5.jar;C:\Users\acm11\.m2\repository\junit\junit\4.13.2\junit-4.13.2.jar;C:\Users\acm11\.m2\repository\org\apache\commons\commons-compress\1.24.0\commons-compress-1.24.0.jar;C:\Users\acm11\.m2\repository\org\rnorth\duct-tape\duct-tape\1.0.8\duct-tape-1.0.8.jar;C:\Users\acm11\.m2\repository\org\jetbrains\annotations\17.0.0\annotations-17.0.0.jar;C:\Users\acm11\.m2\repository\com\github\docker-java\docker-java-api\3.3.4\docker-java-api-3.3.4.jar;C:\Users\acm11\.m2\repository\com\github\docker-java\docker-java-transport-zerodep\3.3.4\docker-java-transport-zerodep-3.3.4.jar;C:\Users\acm11\.m2\repository\com\github\docker-java\docker-java-transport\3.3.4\docker-java-transport-3.3.4.jar;C:\Users\acm11\.m2\repository\net\java\dev\jna\jna\5.13.0\jna-5.13.0.jar;C:\Users\acm11\.m2\repository\org\testcontainers\postgresql\1.19.5\postgresql-1.19.5.jar;C:\Users\acm11\.m2\repository\org\testcontainers\jdbc\1.19.5\jdbc-1.19.5.jar;C:\Users\acm11\.m2\repository\org\testcontainers\database-commons\1.19.5\database-commons-1.19.5.jar;C:\Users\acm11\.m2\repository\org\testcontainers\junit-jupiter\1.19.5\junit-jupiter-1.19.5.jar;"/>
    <property name="java.vm.vendor" value="Oracle Corporation"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="user.variant" value=""/>
    <property name="java.vendor.url" value="https://java.oracle.com/"/>
    <property name="user.timezone" value="Europe/Copenhagen"/>
    <property name="os.name" value="Windows 11"/>
    <property name="java.vm.specification.version" value="19"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="user.country" value="DK"/>
    <property name="sun.boot.library.path" value="C:\Program Files\Java\jdk-19\bin"/>
    <property name="sun.java.command" value="C:\Users\acm11\AppData\Local\Temp\surefire5384840308691009082\surefirebooter-20240531162031474_3.jar C:\Users\acm11\AppData\Local\Temp\surefire5384840308691009082 2024-05-31T16-20-31_284-jvmRun1 surefire-20240531162031474_1tmp surefire_0-20240531162031474_2tmp"/>
    <property name="jdk.debug" value="release"/>
    <property name="surefire.test.class.path" value="C:\Users\acm11\Dev\CA-3-NoteWebPage-Backend\target\test-classes;C:\Users\acm11\Dev\CA-3-NoteWebPage-Backend\target\classes;C:\Users\acm11\.m2\repository\io\javalin\javalin\5.5.0\javalin-5.5.0.jar;C:\Users\acm11\.m2\repository\org\slf4j\slf4j-api\2.0.7\slf4j-api-2.0.7.jar;C:\Users\acm11\.m2\repository\org\eclipse\jetty\jetty-server\11.0.15\jetty-server-11.0.15.jar;C:\Users\acm11\.m2\repository\org\eclipse\jetty\toolchain\jetty-jakarta-servlet-api\5.0.2\jetty-jakarta-servlet-api-5.0.2.jar;C:\Users\acm11\.m2\repository\org\eclipse\jetty\jetty-http\11.0.15\jetty-http-11.0.15.jar;C:\Users\acm11\.m2\repository\org\eclipse\jetty\jetty-util\11.0.15\jetty-util-11.0.15.jar;C:\Users\acm11\.m2\repository\org\eclipse\jetty\jetty-io\11.0.15\jetty-io-11.0.15.jar;C:\Users\acm11\.m2\repository\org\eclipse\jetty\jetty-webapp\11.0.15\jetty-webapp-11.0.15.jar;C:\Users\acm11\.m2\repository\org\eclipse\jetty\jetty-servlet\11.0.15\jetty-servlet-11.0.15.jar;C:\Users\acm11\.m2\repository\org\eclipse\jetty\jetty-security\11.0.15\jetty-security-11.0.15.jar;C:\Users\acm11\.m2\repository\org\eclipse\jetty\jetty-xml\11.0.15\jetty-xml-11.0.15.jar;C:\Users\acm11\.m2\repository\org\eclipse\jetty\websocket\websocket-jetty-server\11.0.15\websocket-jetty-server-11.0.15.jar;C:\Users\acm11\.m2\repository\org\eclipse\jetty\websocket\websocket-jetty-common\11.0.15\websocket-jetty-common-11.0.15.jar;C:\Users\acm11\.m2\repository\org\eclipse\jetty\websocket\websocket-core-common\11.0.15\websocket-core-common-11.0.15.jar;C:\Users\acm11\.m2\repository\org\eclipse\jetty\websocket\websocket-servlet\11.0.15\websocket-servlet-11.0.15.jar;C:\Users\acm11\.m2\repository\org\eclipse\jetty\websocket\websocket-core-server\11.0.15\websocket-core-server-11.0.15.jar;C:\Users\acm11\.m2\repository\org\eclipse\jetty\jetty-annotations\11.0.15\jetty-annotations-11.0.15.jar;C:\Users\acm11\.m2\repository\org\eclipse\jetty\jetty-plus\11.0.15\jetty-plus-11.0.15.jar;C:\Users\acm11\.m2\repository\org\eclipse\jetty\jetty-jndi\11.0.15\jetty-jndi-11.0.15.jar;C:\Users\acm11\.m2\repository\jakarta\annotation\jakarta.annotation-api\2.1.1\jakarta.annotation-api-2.1.1.jar;C:\Users\acm11\.m2\repository\org\ow2\asm\asm\9.5\asm-9.5.jar;C:\Users\acm11\.m2\repository\org\ow2\asm\asm-commons\9.5\asm-commons-9.5.jar;C:\Users\acm11\.m2\repository\org\ow2\asm\asm-tree\9.5\asm-tree-9.5.jar;C:\Users\acm11\.m2\repository\org\eclipse\jetty\websocket\websocket-jetty-api\11.0.15\websocket-jetty-api-11.0.15.jar;C:\Users\acm11\.m2\repository\org\jetbrains\kotlin\kotlin-stdlib-jdk8\1.8.21\kotlin-stdlib-jdk8-1.8.21.jar;C:\Users\acm11\.m2\repository\org\jetbrains\kotlin\kotlin-stdlib\1.8.21\kotlin-stdlib-1.8.21.jar;C:\Users\acm11\.m2\repository\org\jetbrains\kotlin\kotlin-stdlib-common\1.8.21\kotlin-stdlib-common-1.8.21.jar;C:\Users\acm11\.m2\repository\org\jetbrains\kotlin\kotlin-stdlib-jdk7\1.8.21\kotlin-stdlib-jdk7-1.8.21.jar;C:\Users\acm11\.m2\repository\org\slf4j\slf4j-simple\2.0.7\slf4j-simple-2.0.7.jar;C:\Users\acm11\.m2\repository\org\projectlombok\lombok\1.18.28\lombok-1.18.28.jar;C:\Users\acm11\.m2\repository\com\fasterxml\jackson\dataformat\jackson-dataformat-xml\2.16.0\jackson-dataformat-xml-2.16.0.jar;C:\Users\acm11\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.16.0\jackson-core-2.16.0.jar;C:\Users\acm11\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.16.0\jackson-annotations-2.16.0.jar;C:\Users\acm11\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.16.0\jackson-databind-2.16.0.jar;C:\Users\acm11\.m2\repository\org\codehaus\woodstox\stax2-api\4.2.1\stax2-api-4.2.1.jar;C:\Users\acm11\.m2\repository\com\fasterxml\woodstox\woodstox-core\6.5.1\woodstox-core-6.5.1.jar;C:\Users\acm11\.m2\repository\org\postgresql\postgresql\42.6.0\postgresql-42.6.0.jar;C:\Users\acm11\.m2\repository\org\checkerframework\checker-qual\3.31.0\checker-qual-3.31.0.jar;C:\Users\acm11\.m2\repository\org\hibernate\orm\hibernate-core\6.2.4.Final\hibernate-core-6.2.4.Final.jar;C:\Users\acm11\.m2\repository\jakarta\persistence\jakarta.persistence-api\3.1.0\jakarta.persistence-api-3.1.0.jar;C:\Users\acm11\.m2\repository\jakarta\transaction\jakarta.transaction-api\2.0.1\jakarta.transaction-api-2.0.1.jar;C:\Users\acm11\.m2\repository\org\jboss\logging\jboss-logging\3.5.0.Final\jboss-logging-3.5.0.Final.jar;C:\Users\acm11\.m2\repository\org\hibernate\common\hibernate-commons-annotations\6.0.6.Final\hibernate-commons-annotations-6.0.6.Final.jar;C:\Users\acm11\.m2\repository\io\smallrye\jandex\3.0.5\jandex-3.0.5.jar;C:\Users\acm11\.m2\repository\com\fasterxml\classmate\1.5.1\classmate-1.5.1.jar;C:\Users\acm11\.m2\repository\net\bytebuddy\byte-buddy\1.12.18\byte-buddy-1.12.18.jar;C:\Users\acm11\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\4.0.0\jakarta.xml.bind-api-4.0.0.jar;C:\Users\acm11\.m2\repository\jakarta\activation\jakarta.activation-api\2.1.0\jakarta.activation-api-2.1.0.jar;C:\Users\acm11\.m2\repository\org\glassfish\jaxb\jaxb-runtime\4.0.2\jaxb-runtime-4.0.2.jar;C:\Users\acm11\.m2\repository\org\glassfish\jaxb\jaxb-core\4.0.2\jaxb-core-4.0.2.jar;C:\Users\acm11\.m2\repository\org\eclipse\angus\angus-activation\2.0.0\angus-activation-2.0.0.jar;C:\Users\acm11\.m2\repository\org\glassfish\jaxb\txw2\4.0.2\txw2-4.0.2.jar;C:\Users\acm11\.m2\repository\com\sun\istack\istack-commons-runtime\4.1.1\istack-commons-runtime-4.1.1.jar;C:\Users\acm11\.m2\repository\jakarta\inject\jakarta.inject-api\2.0.1\jakarta.inject-api-2.0.1.jar;C:\Users\acm11\.m2\repository\org\antlr\antlr4-runtime\4.10.1\antlr4-runtime-4.10.1.jar;C:\Users\acm11\.m2\repository\org\hamcrest\java-hamcrest\2.0.0.0\java-hamcrest-2.0.0.0.jar;C:\Users\acm11\.m2\repository\io\rest-assured\rest-assured\5.3.2\rest-assured-5.3.2.jar;C:\Users\acm11\.m2\repository\org\apache\groovy\groovy\4.0.11\groovy-4.0.11.jar;C:\Users\acm11\.m2\repository\org\apache\groovy\groovy-xml\4.0.11\groovy-xml-4.0.11.jar;C:\Users\acm11\.m2\repository\org\apache\httpcomponents\httpclient\4.5.13\httpclient-4.5.13.jar;C:\Users\acm11\.m2\repository\org\apache\httpcomponents\httpcore\4.4.13\httpcore-4.4.13.jar;C:\Users\acm11\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar;C:\Users\acm11\.m2\repository\commons-codec\commons-codec\1.11\commons-codec-1.11.jar;C:\Users\acm11\.m2\repository\org\apache\httpcomponents\httpmime\4.5.13\httpmime-4.5.13.jar;C:\Users\acm11\.m2\repository\org\hamcrest\hamcrest\2.2\hamcrest-2.2.jar;C:\Users\acm11\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar;C:\Users\acm11\.m2\repository\io\rest-assured\json-path\5.3.2\json-path-5.3.2.jar;C:\Users\acm11\.m2\repository\org\apache\groovy\groovy-json\4.0.11\groovy-json-4.0.11.jar;C:\Users\acm11\.m2\repository\io\rest-assured\rest-assured-common\5.3.2\rest-assured-common-5.3.2.jar;C:\Users\acm11\.m2\repository\io\rest-assured\xml-path\5.3.2\xml-path-5.3.2.jar;C:\Users\acm11\.m2\repository\org\apache\commons\commons-lang3\3.11\commons-lang3-3.11.jar;C:\Users\acm11\.m2\repository\io\rest-assured\json-schema-validator\5.3.2\json-schema-validator-5.3.2.jar;C:\Users\acm11\.m2\repository\com\github\java-json-tools\json-schema-validator\2.2.14\json-schema-validator-2.2.14.jar;C:\Users\acm11\.m2\repository\com\github\java-json-tools\jackson-coreutils-equivalence\1.0\jackson-coreutils-equivalence-1.0.jar;C:\Users\acm11\.m2\repository\com\github\java-json-tools\jackson-coreutils\2.0\jackson-coreutils-2.0.jar;C:\Users\acm11\.m2\repository\com\github\java-json-tools\msg-simple\1.2\msg-simple-1.2.jar;C:\Users\acm11\.m2\repository\com\github\java-json-tools\btf\1.3\btf-1.3.jar;C:\Users\acm11\.m2\repository\com\github\java-json-tools\json-schema-core\1.2.14\json-schema-core-1.2.14.jar;C:\Users\acm11\.m2\repository\com\github\java-json-tools\uri-template\0.10\uri-template-0.10.jar;C:\Users\acm11\.m2\repository\org\mozilla\rhino\1.7.7.2\rhino-1.7.7.2.jar;C:\Users\acm11\.m2\repository\com\sun\mail\mailapi\1.6.2\mailapi-1.6.2.jar;C:\Users\acm11\.m2\repository\joda-time\joda-time\2.10.5\joda-time-2.10.5.jar;C:\Users\acm11\.m2\repository\com\googlecode\libphonenumber\libphonenumber\8.11.1\libphonenumber-8.11.1.jar;C:\Users\acm11\.m2\repository\com\google\code\findbugs\jsr305\3.0.2\jsr305-3.0.2.jar;C:\Users\acm11\.m2\repository\net\sf\jopt-simple\jopt-simple\5.0.4\jopt-simple-5.0.4.jar;C:\Users\acm11\.m2\repository\com\google\guava\guava\32.0.1-jre\guava-32.0.1-jre.jar;C:\Users\acm11\.m2\repository\com\google\guava\failureaccess\1.0.1\failureaccess-1.0.1.jar;C:\Users\acm11\.m2\repository\com\google\guava\listenablefuture\9999.0-empty-to-avoid-conflict-with-guava\listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar;C:\Users\acm11\.m2\repository\com\google\errorprone\error_prone_annotations\2.18.0\error_prone_annotations-2.18.0.jar;C:\Users\acm11\.m2\repository\com\google\j2objc\j2objc-annotations\2.8\j2objc-annotations-2.8.jar;C:\Users\acm11\.m2\repository\org\mindrot\jbcrypt\0.4\jbcrypt-0.4.jar;C:\Users\acm11\.m2\repository\com\nimbusds\nimbus-jose-jwt\9.10\nimbus-jose-jwt-9.10.jar;C:\Users\acm11\.m2\repository\com\github\stephenc\jcip\jcip-annotations\1.0-1\jcip-annotations-1.0-1.jar;C:\Users\acm11\.m2\repository\org\junit\jupiter\junit-jupiter-api\5.7.2\junit-jupiter-api-5.7.2.jar;C:\Users\acm11\.m2\repository\org\apiguardian\apiguardian-api\1.1.0\apiguardian-api-1.1.0.jar;C:\Users\acm11\.m2\repository\org\opentest4j\opentest4j\1.2.0\opentest4j-1.2.0.jar;C:\Users\acm11\.m2\repository\org\junit\platform\junit-platform-commons\1.7.2\junit-platform-commons-1.7.2.jar;C:\Users\acm11\.m2\repository\org\junit\jupiter\junit-jupiter-engine\5.7.2\junit-jupiter-engine-5.7.2.jar;C:\Users\acm11\.m2\repository\org\junit\platform\junit-platform-engine\1.7.2\junit-platform-engine-1.7.2.jar;C:\Users\acm11\.m2\repository\org\junit\jupiter\junit-jupiter-params\5.7.2\junit-jupiter-params-5.7.2.jar;C:\Users\acm11\.m2\repository\org\hamcrest\hamcrest-library\1.3\hamcrest-library-1.3.jar;C:\Users\acm11\.m2\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar;C:\Users\acm11\.m2\repository\org\testcontainers\testcontainers\1.19.5\testcontainers-1.19.5.jar;C:\Users\acm11\.m2\repository\junit\junit\4.13.2\junit-4.13.2.jar;C:\Users\acm11\.m2\repository\org\apache\commons\commons-compress\1.24.0\commons-compress-1.24.0.jar;C:\Users\acm11\.m2\repository\org\rnorth\duct-tape\duct-tape\1.0.8\duct-tape-1.0.8.jar;C:\Users\acm11\.m2\repository\org\jetbrains\annotations\17.0.0\annotations-17.0.0.jar;C:\Users\acm11\.m2\repository\com\github\docker-java\docker-java-api\3.3.4\docker-java-api-3.3.4.jar;C:\Users\acm11\.m2\repository\com\github\docker-java\docker-java-transport-zerodep\3.3.4\docker-java-transport-zerodep-3.3.4.jar;C:\Users\acm11\.m2\repository\com\github\docker-java\docker-java-transport\3.3.4\docker-java-transport-3.3.4.jar;C:\Users\acm11\.m2\repository\net\java\dev\jna\jna\5.13.0\jna-5.13.0.jar;C:\Users\acm11\.m2\repository\org\testcontainers\postgresql\1.19.5\postgresql-1.19.5.jar;C:\Users\acm11\.m2\repository\org\testcontainers\jdbc\1.19.5\jdbc-1.19.5.jar;C:\Users\acm11\.m2\repository\org\testcontainers\database-commons\1.19.5\database-commons-1.19.5.jar;C:\Users\acm11\.m2\repository\org\testcontainers\junit-jupiter\1.19.5\junit-jupiter-1.19.5.jar;"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="C:\Users\acm11"/>
    <property name="user.language" value="da"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2023-01-17"/>
    <property name="java.home" value="C:\Program Files\Java\jdk-19"/>
    <property name="file.separator" value="\"/>
    <property name="basedir" value="C:\Users\acm11\Dev\CA-3-NoteWebPage-Backend"/>
    <property name="java.vm.compressedOopsMode" value="Zero based"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="surefire.real.class.path" value="C:\Users\acm11\AppData\Local\Temp\surefire5384840308691009082\surefirebooter-20240531162031474_3.jar"/>
    <property name="user.script" value=""/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="java.runtime.version" value="19.0.2+7-44"/>
    <property name="user.name" value="acm11"/>
    <property name="stdout.encoding" value="Cp1252"/>
    <property name="path.separator" value=";"/>
    <property name="os.version" value="10.0"/>
    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
    <property name="localRepository" value="C:\Users\acm11\.m2\repository"/>
    <property name="java.vendor.url.bug" value="https://bugreport.java.com/bugreport/"/>
    <property name="jetty.git.hash" value="5bc5e562c8d05c5862505aebe5cf83a61bdbcb96"/>
    <property name="java.io.tmpdir" value="C:\Users\acm11\AppData\Local\Temp\"/>
    <property name="idea.version" value="2022.3.2"/>
    <property name="java.version" value="19.0.2"/>
    <property name="user.dir" value="C:\Users\acm11\Dev\CA-3-NoteWebPage-Backend"/>
    <property name="os.arch" value="amd64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="sun.os.patch.level" value=""/>
    <property name="native.encoding" value="Cp1252"/>
    <property name="java.library.path" value="C:\Program Files\Java\jdk-19\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\Program Files\Google\Chrome\Application;C:\Python312\Scripts\;C:\Python312\;C:\Program Files\Eclipse Adoptium\jdk-17.0.6.10-hotspot\bin;C:\Program Files\Common Files\Oracle\Java\javapath;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\Users\acm11\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Python 3.10;C:\Users\acm11\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\Scripts;C:\Users\acm11\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\pip;C:\Program Files\Git\cmd;C:\Program Files\Docker\Docker\resources\bin;C:\Program Files\nodejs\;C:\ProgramData\chocolatey\bin;C:\Program Files\MySQL\MySQL Shell 8.0\bin\;C:\Users\acm11\AppData\Local\Programs\Python\Python39\Scripts\;C:\Users\acm11\AppData\Local\Programs\Python\Python39\;C:\Users\acm11\AppData\Local\Microsoft\WindowsApps;C:\Users\acm11\AppData\Local\Programs\Microsoft VS Code\bin;C:\Users\acm11\AppData\Local\GitHubDesktop\bin;C:\Users\acm11\AppData\Roaming\npm;."/>
    <property name="java.vm.info" value="mixed mode, sharing"/>
    <property name="stderr.encoding" value="Cp1252"/>
    <property name="java.vendor" value="Oracle Corporation"/>
    <property name="java.vm.version" value="19.0.2+7-44"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="java.class.version" value="63.0"/>
  </properties>
  <testcase name="sortNotesByDate" classname="notes.EndpointTest" time="1.659">
    <system-out><![CDATA[Hibernate: 
    alter table if exists Note_users 
       drop constraint if exists FK2mm3shueu8vw7a60pm4wwq5lq
Hibernate: 
    alter table if exists Note_users 
       drop constraint if exists FK1k56vaugtcfw6bu4tuo7g2xo5
Hibernate: 
    alter table if exists user_roles 
       drop constraint if exists FK53v9b6vwc56nm9llvcdhs8y8f
Hibernate: 
    alter table if exists user_roles 
       drop constraint if exists FKscvbq0n9bo03s7w6ujfyrtg4a
Hibernate: 
    drop table if exists Note cascade
Hibernate: 
    drop table if exists Note_users cascade
Hibernate: 
    drop table if exists role cascade
Hibernate: 
    drop table if exists user_roles cascade
Hibernate: 
    drop table if exists users cascade
Hibernate: 
    create table Note (
        category smallint check (category between 0 and 1),
        date date,
        id serial not null,
        lastEditDate date,
        content varchar(255),
        title varchar(255),
        primary key (id)
    )
Hibernate: 
    create table Note_users (
        notes_id integer not null,
        users_email varchar(255) not null,
        primary key (notes_id, users_email)
    )
Hibernate: 
    create table role (
        name varchar(255) not null,
        primary key (name)
    )
Hibernate: 
    create table user_roles (
        role_name varchar(255) not null,
        user_name varchar(255) not null,
        primary key (role_name, user_name)
    )
Hibernate: 
    create table users (
        email varchar(255) not null,
        password varchar(255),
        primary key (email)
    )
Hibernate: 
    alter table if exists Note_users 
       add constraint FK2mm3shueu8vw7a60pm4wwq5lq 
       foreign key (users_email) 
       references users
Hibernate: 
    alter table if exists Note_users 
       add constraint FK1k56vaugtcfw6bu4tuo7g2xo5 
       foreign key (notes_id) 
       references Note
Hibernate: 
    alter table if exists user_roles 
       add constraint FK53v9b6vwc56nm9llvcdhs8y8f 
       foreign key (role_name) 
       references role
Hibernate: 
    alter table if exists user_roles 
       add constraint FKscvbq0n9bo03s7w6ujfyrtg4a 
       foreign key (user_name) 
       references users
Hibernate: 
    /* DELETE 
    FROM
        Note n */ delete 
    from
        Note_users
Hibernate: 
    /* DELETE 
    FROM
        Note n */ delete 
    from
        Note
Hibernate: 
    /* dynamic native SQL query */ ALTER SEQUENCE note_id_seq RESTART WITH 1
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* DELETE 
    FROM
        User */ delete 
    from
        Note_users
Hibernate: 
    /* DELETE 
    FROM
        User */ delete 
    from
        user_roles
Hibernate: 
    /* DELETE 
    FROM
        User */ delete 
    from
        users
Hibernate: 
    /* DELETE 
    FROM
        Role */ delete 
    from
        user_roles
Hibernate: 
    /* DELETE 
    FROM
        Role */ delete 
    from
        role
Hibernate: 
    /* insert for
        notes.ressources.Role */insert 
    into
        role (name) 
    values
        (?)
Hibernate: 
    /* insert for
        notes.ressources.Role */insert 
    into
        role (name) 
    values
        (?)
Hibernate: 
    /* insert for
        notes.ressources.User */insert 
    into
        users (password,email) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.User */insert 
    into
        users (password,email) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note.users */insert 
    into
        Note_users (notes_id,users_email) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note.users */insert 
    into
        Note_users (notes_id,users_email) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.User.roles */insert 
    into
        user_roles (user_name,role_name) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.User.roles */insert 
    into
        user_roles (user_name,role_name) 
    values
        (?,?)
USER IN LOGIN: UserDTO(email=user, password=user, roles=null)
Hibernate: 
    select
        u1_0.email,
        n1_0.users_email,
        n1_1.id,
        n1_1.category,
        n1_1.content,
        n1_1.date,
        n1_1.lastEditDate,
        n1_1.title,
        u1_0.password,
        r1_0.user_name,
        r1_1.name 
    from
        users u1_0 
    left join
        (Note_users n1_0 
    join
        Note n1_1 
            on n1_1.id=n1_0.notes_id) 
                on u1_0.email=n1_0.users_email 
        left join
            (user_roles r1_0 
        join
            role r1_1 
                on r1_1.name=r1_0.role_name) 
                    on u1_0.email=r1_0.user_name 
            where
                u1_0.email=?
Hibernate: 
    select
        u1_0.notes_id,
        u1_1.email,
        u1_1.password,
        r1_0.user_name,
        r1_1.name 
    from
        Note_users u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.users_email 
    left join
        (user_roles r1_0 
    join
        role r1_1 
            on r1_1.name=r1_0.role_name) 
                on u1_1.email=r1_0.user_name 
        where
            u1_0.notes_id=?
Hibernate: 
    select
        u1_0.role_name,
        u1_1.email,
        n1_0.users_email,
        n1_1.id,
        n1_1.category,
        n1_1.content,
        n1_1.date,
        n1_1.lastEditDate,
        n1_1.title,
        u1_1.password 
    from
        user_roles u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.user_name 
    left join
        (Note_users n1_0 
    join
        Note n1_1 
            on n1_1.id=n1_0.notes_id) 
                on u1_1.email=n1_0.users_email 
        where
            u1_0.role_name=?
Hibernate: 
    select
        u1_0.notes_id,
        u1_1.email,
        u1_1.password,
        r1_0.user_name,
        r1_1.name 
    from
        Note_users u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.users_email 
    left join
        (user_roles r1_0 
    join
        role r1_1 
            on r1_1.name=r1_0.role_name) 
                on u1_1.email=r1_0.user_name 
        where
            u1_0.notes_id=?
USER IN AUTHENTICATE: UserDTO(email=user, password=null, roles=[, user])
USER IN CHECK_SEC_ROLES: UserDTO(email=user, password=null, roles=[, user])
Hibernate: 
    /* SELECT
        n 
    FROM
        User u 
    JOIN
        u.notes n 
    WHERE
        u.email = :email */ select
            n1_1.id,
            n1_1.category,
            n1_1.content,
            n1_1.date,
            n1_1.lastEditDate,
            n1_1.title 
        from
            users u1_0 
        join
            (Note_users n1_0 
        join
            Note n1_1 
                on n1_1.id=n1_0.notes_id) 
                    on u1_0.email=n1_0.users_email 
            where
                u1_0.email=?
Hibernate: 
    select
        u1_0.notes_id,
        u1_1.email,
        u1_1.password,
        r1_0.user_name,
        r1_1.name 
    from
        Note_users u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.users_email 
    left join
        (user_roles r1_0 
    join
        role r1_1 
            on r1_1.name=r1_0.role_name) 
                on u1_1.email=r1_0.user_name 
        where
            u1_0.notes_id=?
Hibernate: 
    select
        u1_0.role_name,
        u1_1.email,
        n1_0.users_email,
        n1_1.id,
        n1_1.category,
        n1_1.content,
        n1_1.date,
        n1_1.lastEditDate,
        n1_1.title,
        u1_1.password 
    from
        user_roles u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.user_name 
    left join
        (Note_users n1_0 
    join
        Note n1_1 
            on n1_1.id=n1_0.notes_id) 
                on u1_1.email=n1_0.users_email 
        where
            u1_0.role_name=?
Hibernate: 
    select
        u1_0.notes_id,
        u1_1.email,
        u1_1.password,
        r1_0.user_name,
        r1_1.name 
    from
        Note_users u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.users_email 
    left join
        (user_roles r1_0 
    join
        role r1_1 
            on r1_1.name=r1_0.role_name) 
                on u1_1.email=r1_0.user_name 
        where
            u1_0.notes_id=?
HTTP/1.1 200 OK
Date: Fri, 31 May 2024 14:20:40 GMT
Content-Type: application/json
Content-Length: 252

[{"id":1,"title":"title1","content":"this is the first note","category":"NOTE","colaborators":["user"],"date":"2024-05-31"},{"id":2,"title":"title2","content":"this is the second note","category":"REMINDER","colaborators":["user"],"date":"2024-05-31"}]
]]></system-out>
    <system-err><![CDATA[maj 31, 2024 4:20:32 PM org.hibernate.Version logVersion
INFO: HHH000412: Hibernate ORM core version 6.2.4.Final
maj 31, 2024 4:20:32 PM org.hibernate.cfg.Environment <clinit>
INFO: HHH000406: Using bytecode reflection optimizer
maj 31, 2024 4:20:32 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl configure
WARN: HHH10001002: Using built-in connection pool (not intended for production use)
maj 31, 2024 4:20:32 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001005: Loaded JDBC driver class: org.testcontainers.jdbc.ContainerDatabaseDriver
maj 31, 2024 4:20:32 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001012: Connecting with JDBC URL [jdbc:tc:postgresql:15.3-alpine3.18:///test_db]
maj 31, 2024 4:20:32 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001001: Connection properties: {password=****, user=postgres}
maj 31, 2024 4:20:32 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001003: Autocommit mode: false
maj 31, 2024 4:20:32 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl$PooledConnections <init>
INFO: HHH10001115: Connection pool size: 20 (min=1)
[main] INFO org.testcontainers.images.PullPolicy - Image pull policy will be performed by: DefaultPullPolicy()
[main] INFO org.testcontainers.utility.ImageNameSubstitutor - Image name substitution will be performed by: DefaultImageNameSubstitutor (composite of 'ConfigurationFileImageNameSubstitutor' and 'PrefixingImageNameSubstitutor')
[main] INFO org.testcontainers.dockerclient.DockerClientProviderStrategy - Loaded org.testcontainers.dockerclient.NpipeSocketClientProviderStrategy from ~/.testcontainers.properties, will try it first
[main] INFO org.testcontainers.dockerclient.DockerClientProviderStrategy - Found Docker environment with local Npipe socket (npipe:////./pipe/docker_engine)
[main] INFO org.testcontainers.DockerClientFactory - Docker host IP address is localhost
[main] INFO org.testcontainers.DockerClientFactory - Connected to docker: 
  Server Version: 24.0.5
  API Version: 1.43
  Operating System: Docker Desktop
  Total Memory: 6866 MB
[main] INFO tc.testcontainers/ryuk:0.6.0 - Creating container for image: testcontainers/ryuk:0.6.0
[main] INFO org.testcontainers.utility.RegistryAuthLocator - Credential helper/store (docker-credential-desktop) does not have credentials for https://index.docker.io/v1/
[main] INFO tc.testcontainers/ryuk:0.6.0 - Container testcontainers/ryuk:0.6.0 is starting: 9d0825dacc2f9eed7a85c957fe07bfcc6078cdc6020aa985ae42a376f5a5bb75
[main] INFO tc.testcontainers/ryuk:0.6.0 - Container testcontainers/ryuk:0.6.0 started in PT1.0951929S
[main] INFO org.testcontainers.utility.RyukResourceReaper - Ryuk started - will monitor and terminate Testcontainers containers on JVM exit
[main] INFO org.testcontainers.DockerClientFactory - Checking the system...
[main] INFO org.testcontainers.DockerClientFactory - ✔︎ Docker server version should be at least 1.6.0
[main] INFO tc.postgres:15.3-alpine3.18 - Creating container for image: postgres:15.3-alpine3.18
[main] INFO tc.postgres:15.3-alpine3.18 - Container postgres:15.3-alpine3.18 is starting: 7aa51a1192341ae316c87e81263287d865545454078f72b6e89a1408bd47efec
[main] INFO tc.postgres:15.3-alpine3.18 - Container postgres:15.3-alpine3.18 started in PT2.0504307S
[main] INFO tc.postgres:15.3-alpine3.18 - Container is started (JDBC URL: jdbc:postgresql://localhost:61494/test?loggerLevel=OFF)
maj 31, 2024 4:20:37 PM org.hibernate.bytecode.internal.BytecodeProviderInitiator buildBytecodeProvider
INFO: HHH000021: Bytecode provider name : bytebuddy
maj 31, 2024 4:20:38 PM org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl getIsolatedConnection
INFO: HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@6802d023] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
maj 31, 2024 4:20:38 PM org.hibernate.engine.jdbc.spi.SqlExceptionHelper$StandardWarningHandler logWarning
WARN: SQL Warning Code: 0, SQLState: 00000
maj 31, 2024 4:20:38 PM org.hibernate.engine.jdbc.spi.SqlExceptionHelper$StandardWarningHandler logWarning
WARN: relation "note_users" does not exist, skipping
maj 31, 2024 4:20:38 PM org.hibernate.engine.jdbc.spi.SqlExceptionHelper$StandardWarningHandler logWarning
WARN: SQL Warning Code: 0, SQLState: 00000
maj 31, 2024 4:20:38 PM org.hibernate.engine.jdbc.spi.SqlExceptionHelper$StandardWarningHandler logWarning
WARN: relation "note_users" does not exist, skipping
maj 31, 2024 4:20:38 PM org.hibernate.engine.jdbc.spi.SqlExceptionHelper$StandardWarningHandler logWarning
WARN: SQL Warning Code: 0, SQLState: 00000
maj 31, 2024 4:20:38 PM org.hibernate.engine.jdbc.spi.SqlExceptionHelper$StandardWarningHandler logWarning
WARN: relation "user_roles" does not exist, skipping
maj 31, 2024 4:20:38 PM org.hibernate.engine.jdbc.spi.SqlExceptionHelper$StandardWarningHandler logWarning
WARN: SQL Warning Code: 0, SQLState: 00000
maj 31, 2024 4:20:38 PM org.hibernate.engine.jdbc.spi.SqlExceptionHelper$StandardWarningHandler logWarning
WARN: relation "user_roles" does not exist, skipping
maj 31, 2024 4:20:38 PM org.hibernate.engine.jdbc.spi.SqlExceptionHelper$StandardWarningHandler logWarning
WARN: SQL Warning Code: 0, SQLState: 00000
maj 31, 2024 4:20:38 PM org.hibernate.engine.jdbc.spi.SqlExceptionHelper$StandardWarningHandler logWarning
WARN: table "note" does not exist, skipping
maj 31, 2024 4:20:38 PM org.hibernate.engine.jdbc.spi.SqlExceptionHelper$StandardWarningHandler logWarning
WARN: SQL Warning Code: 0, SQLState: 00000
maj 31, 2024 4:20:38 PM org.hibernate.engine.jdbc.spi.SqlExceptionHelper$StandardWarningHandler logWarning
WARN: table "note_users" does not exist, skipping
maj 31, 2024 4:20:38 PM org.hibernate.engine.jdbc.spi.SqlExceptionHelper$StandardWarningHandler logWarning
WARN: SQL Warning Code: 0, SQLState: 00000
maj 31, 2024 4:20:38 PM org.hibernate.engine.jdbc.spi.SqlExceptionHelper$StandardWarningHandler logWarning
WARN: table "role" does not exist, skipping
maj 31, 2024 4:20:38 PM org.hibernate.engine.jdbc.spi.SqlExceptionHelper$StandardWarningHandler logWarning
WARN: SQL Warning Code: 0, SQLState: 00000
maj 31, 2024 4:20:38 PM org.hibernate.engine.jdbc.spi.SqlExceptionHelper$StandardWarningHandler logWarning
WARN: table "user_roles" does not exist, skipping
maj 31, 2024 4:20:38 PM org.hibernate.engine.jdbc.spi.SqlExceptionHelper$StandardWarningHandler logWarning
WARN: SQL Warning Code: 0, SQLState: 00000
maj 31, 2024 4:20:38 PM org.hibernate.engine.jdbc.spi.SqlExceptionHelper$StandardWarningHandler logWarning
WARN: table "users" does not exist, skipping
maj 31, 2024 4:20:38 PM org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl getIsolatedConnection
INFO: HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@540212be] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
[main] INFO io.javalin.Javalin - Starting Javalin ...
[main] INFO org.eclipse.jetty.server.Server - jetty-11.0.15; built: 2023-04-11T18:37:53.775Z; git: 5bc5e562c8d05c5862505aebe5cf83a61bdbcb96; jvm 19.0.2+7-44
[main] INFO org.eclipse.jetty.server.session.DefaultSessionIdManager - Session workerName=node0
[main] INFO org.eclipse.jetty.server.handler.ContextHandler - Started i.j.j.@d65e744{/api,null,AVAILABLE}
[main] INFO org.eclipse.jetty.server.AbstractConnector - Started ServerConnector@4ec37a42{HTTP/1.1, (http/1.1)}{0.0.0.0:7777}
[main] INFO org.eclipse.jetty.server.Server - Started Server@1f72fbd1{STARTING}[11.0.15,sto=0] @7046ms
[main] INFO io.javalin.Javalin - 
       __                  ___          ______
      / /___ __   ______ _/ (_)___     / ____/
 __  / / __ `/ | / / __ `/ / / __ \   /___ \
/ /_/ / /_/ /| |/ / /_/ / / / / / /  ____/ /
\____/\__,_/ |___/\__,_/_/_/_/ /_/  /_____/

       https://javalin.io/documentation

[main] INFO io.javalin.Javalin - Listening on http://localhost:7777/api
[main] INFO io.javalin.Javalin - You are running Javalin 5.5.0 (released May 1, 2023. Your Javalin version is 395 days old. Consider checking for a newer version.).
[main] INFO io.javalin.Javalin - Javalin started in 245ms \o/
]]></system-err>
  </testcase>
  <testcase name="getNoteById" classname="notes.EndpointTest" time="0.275">
    <system-out><![CDATA[Hibernate: 
    /* DELETE 
    FROM
        Note n */ delete 
    from
        Note_users
Hibernate: 
    /* DELETE 
    FROM
        Note n */ delete 
    from
        Note
Hibernate: 
    /* dynamic native SQL query */ ALTER SEQUENCE note_id_seq RESTART WITH 1
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* DELETE 
    FROM
        User */ delete 
    from
        Note_users
Hibernate: 
    /* DELETE 
    FROM
        User */ delete 
    from
        user_roles
Hibernate: 
    /* DELETE 
    FROM
        User */ delete 
    from
        users
Hibernate: 
    /* DELETE 
    FROM
        Role */ delete 
    from
        user_roles
Hibernate: 
    /* DELETE 
    FROM
        Role */ delete 
    from
        role
Hibernate: 
    /* insert for
        notes.ressources.Role */insert 
    into
        role (name) 
    values
        (?)
Hibernate: 
    /* insert for
        notes.ressources.Role */insert 
    into
        role (name) 
    values
        (?)
Hibernate: 
    /* insert for
        notes.ressources.User */insert 
    into
        users (password,email) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.User */insert 
    into
        users (password,email) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note.users */insert 
    into
        Note_users (notes_id,users_email) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note.users */insert 
    into
        Note_users (notes_id,users_email) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.User.roles */insert 
    into
        user_roles (user_name,role_name) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.User.roles */insert 
    into
        user_roles (user_name,role_name) 
    values
        (?,?)
USER IN LOGIN: UserDTO(email=user, password=user, roles=null)
Hibernate: 
    select
        u1_0.email,
        n1_0.users_email,
        n1_1.id,
        n1_1.category,
        n1_1.content,
        n1_1.date,
        n1_1.lastEditDate,
        n1_1.title,
        u1_0.password,
        r1_0.user_name,
        r1_1.name 
    from
        users u1_0 
    left join
        (Note_users n1_0 
    join
        Note n1_1 
            on n1_1.id=n1_0.notes_id) 
                on u1_0.email=n1_0.users_email 
        left join
            (user_roles r1_0 
        join
            role r1_1 
                on r1_1.name=r1_0.role_name) 
                    on u1_0.email=r1_0.user_name 
            where
                u1_0.email=?
Hibernate: 
    select
        u1_0.notes_id,
        u1_1.email,
        u1_1.password,
        r1_0.user_name,
        r1_1.name 
    from
        Note_users u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.users_email 
    left join
        (user_roles r1_0 
    join
        role r1_1 
            on r1_1.name=r1_0.role_name) 
                on u1_1.email=r1_0.user_name 
        where
            u1_0.notes_id=?
Hibernate: 
    select
        u1_0.role_name,
        u1_1.email,
        n1_0.users_email,
        n1_1.id,
        n1_1.category,
        n1_1.content,
        n1_1.date,
        n1_1.lastEditDate,
        n1_1.title,
        u1_1.password 
    from
        user_roles u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.user_name 
    left join
        (Note_users n1_0 
    join
        Note n1_1 
            on n1_1.id=n1_0.notes_id) 
                on u1_1.email=n1_0.users_email 
        where
            u1_0.role_name=?
Hibernate: 
    select
        u1_0.notes_id,
        u1_1.email,
        u1_1.password,
        r1_0.user_name,
        r1_1.name 
    from
        Note_users u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.users_email 
    left join
        (user_roles r1_0 
    join
        role r1_1 
            on r1_1.name=r1_0.role_name) 
                on u1_1.email=r1_0.user_name 
        where
            u1_0.notes_id=?
USER IN AUTHENTICATE: UserDTO(email=user, password=null, roles=[, user])
USER IN CHECK_SEC_ROLES: UserDTO(email=user, password=null, roles=[, user])
Hibernate: 
    select
        n1_0.id,
        n1_0.category,
        n1_0.content,
        n1_0.date,
        n1_0.lastEditDate,
        n1_0.title,
        u1_0.notes_id,
        u1_1.email,
        u1_1.password,
        r1_0.user_name,
        r1_1.name 
    from
        Note n1_0 
    left join
        (Note_users u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.users_email) 
                on n1_0.id=u1_0.notes_id 
        left join
            (user_roles r1_0 
        join
            role r1_1 
                on r1_1.name=r1_0.role_name) 
                    on u1_1.email=r1_0.user_name 
            where
                n1_0.id=?
Hibernate: 
    select
        u1_0.role_name,
        u1_1.email,
        n1_0.users_email,
        n1_1.id,
        n1_1.category,
        n1_1.content,
        n1_1.date,
        n1_1.lastEditDate,
        n1_1.title,
        u1_1.password 
    from
        user_roles u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.user_name 
    left join
        (Note_users n1_0 
    join
        Note n1_1 
            on n1_1.id=n1_0.notes_id) 
                on u1_1.email=n1_0.users_email 
        where
            u1_0.role_name=?
Hibernate: 
    select
        u1_0.notes_id,
        u1_1.email,
        u1_1.password,
        r1_0.user_name,
        r1_1.name 
    from
        Note_users u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.users_email 
    left join
        (user_roles r1_0 
    join
        role r1_1 
            on r1_1.name=r1_0.role_name) 
                on u1_1.email=r1_0.user_name 
        where
            u1_0.notes_id=?
HTTP/1.1 200 OK
Date: Fri, 31 May 2024 14:20:40 GMT
Content-Type: application/json
Content-Length: 122

{"id":1,"title":"title1","content":"this is the first note","category":"NOTE","colaborators":["user"],"date":"2024-05-31"}
]]></system-out>
  </testcase>
  <testcase name="getAllUsers" classname="notes.EndpointTest" time="0.282">
    <system-out><![CDATA[Hibernate: 
    /* DELETE 
    FROM
        Note n */ delete 
    from
        Note_users
Hibernate: 
    /* DELETE 
    FROM
        Note n */ delete 
    from
        Note
Hibernate: 
    /* dynamic native SQL query */ ALTER SEQUENCE note_id_seq RESTART WITH 1
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* DELETE 
    FROM
        User */ delete 
    from
        Note_users
Hibernate: 
    /* DELETE 
    FROM
        User */ delete 
    from
        user_roles
Hibernate: 
    /* DELETE 
    FROM
        User */ delete 
    from
        users
Hibernate: 
    /* DELETE 
    FROM
        Role */ delete 
    from
        user_roles
Hibernate: 
    /* DELETE 
    FROM
        Role */ delete 
    from
        role
Hibernate: 
    /* insert for
        notes.ressources.Role */insert 
    into
        role (name) 
    values
        (?)
Hibernate: 
    /* insert for
        notes.ressources.Role */insert 
    into
        role (name) 
    values
        (?)
Hibernate: 
    /* insert for
        notes.ressources.User */insert 
    into
        users (password,email) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.User */insert 
    into
        users (password,email) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note.users */insert 
    into
        Note_users (notes_id,users_email) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note.users */insert 
    into
        Note_users (notes_id,users_email) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.User.roles */insert 
    into
        user_roles (user_name,role_name) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.User.roles */insert 
    into
        user_roles (user_name,role_name) 
    values
        (?,?)
USER IN LOGIN: UserDTO(email=admin, password=admin, roles=null)
Hibernate: 
    select
        u1_0.email,
        n1_0.users_email,
        n1_1.id,
        n1_1.category,
        n1_1.content,
        n1_1.date,
        n1_1.lastEditDate,
        n1_1.title,
        u1_0.password,
        r1_0.user_name,
        r1_1.name 
    from
        users u1_0 
    left join
        (Note_users n1_0 
    join
        Note n1_1 
            on n1_1.id=n1_0.notes_id) 
                on u1_0.email=n1_0.users_email 
        left join
            (user_roles r1_0 
        join
            role r1_1 
                on r1_1.name=r1_0.role_name) 
                    on u1_0.email=r1_0.user_name 
            where
                u1_0.email=?
Hibernate: 
    select
        u1_0.role_name,
        u1_1.email,
        n1_0.users_email,
        n1_1.id,
        n1_1.category,
        n1_1.content,
        n1_1.date,
        n1_1.lastEditDate,
        n1_1.title,
        u1_1.password 
    from
        user_roles u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.user_name 
    left join
        (Note_users n1_0 
    join
        Note n1_1 
            on n1_1.id=n1_0.notes_id) 
                on u1_1.email=n1_0.users_email 
        where
            u1_0.role_name=?
USER IN AUTHENTICATE: UserDTO(email=admin, password=null, roles=[, admin])
USER IN CHECK_SEC_ROLES: UserDTO(email=admin, password=null, roles=[, admin])
Hibernate: 
    /* SELECT
        u 
    FROM
        User u */ select
            u1_0.email,
            u1_0.password 
        from
            users u1_0
Hibernate: 
    select
        r1_0.user_name,
        r1_1.name 
    from
        user_roles r1_0 
    join
        role r1_1 
            on r1_1.name=r1_0.role_name 
    where
        r1_0.user_name=?
Hibernate: 
    select
        u1_0.role_name,
        u1_1.email,
        n1_0.users_email,
        n1_1.id,
        n1_1.category,
        n1_1.content,
        n1_1.date,
        n1_1.lastEditDate,
        n1_1.title,
        u1_1.password 
    from
        user_roles u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.user_name 
    left join
        (Note_users n1_0 
    join
        Note n1_1 
            on n1_1.id=n1_0.notes_id) 
                on u1_1.email=n1_0.users_email 
        where
            u1_0.role_name=?
Hibernate: 
    select
        r1_0.user_name,
        r1_1.name 
    from
        user_roles r1_0 
    join
        role r1_1 
            on r1_1.name=r1_0.role_name 
    where
        r1_0.user_name=?
Hibernate: 
    select
        u1_0.role_name,
        u1_1.email,
        n1_0.users_email,
        n1_1.id,
        n1_1.category,
        n1_1.content,
        n1_1.date,
        n1_1.lastEditDate,
        n1_1.title,
        u1_1.password 
    from
        user_roles u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.user_name 
    left join
        (Note_users n1_0 
    join
        Note n1_1 
            on n1_1.id=n1_0.notes_id) 
                on u1_1.email=n1_0.users_email 
        where
            u1_0.role_name=?
Hibernate: 
    select
        u1_0.notes_id,
        u1_1.email,
        u1_1.password,
        r1_0.user_name,
        r1_1.name 
    from
        Note_users u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.users_email 
    left join
        (user_roles r1_0 
    join
        role r1_1 
            on r1_1.name=r1_0.role_name) 
                on u1_1.email=r1_0.user_name 
        where
            u1_0.notes_id=?
Hibernate: 
    select
        u1_0.notes_id,
        u1_1.email,
        u1_1.password,
        r1_0.user_name,
        r1_1.name 
    from
        Note_users u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.users_email 
    left join
        (user_roles r1_0 
    join
        role r1_1 
            on r1_1.name=r1_0.role_name) 
                on u1_1.email=r1_0.user_name 
        where
            u1_0.notes_id=?
HTTP/1.1 200 OK
Date: Fri, 31 May 2024 14:20:40 GMT
Content-Type: application/json
Content-Length: 219

[{"email":"user","password":"$2a$10$fMJVp38VrTXMrL6ajR70ce7vjnlo88Ti1e491JaTWZ0Vzl31L30ay","roles":["user"]},{"email":"admin","password":"$2a$10$UPg1rsLzxPngR3gxg48Mc.BbkVZmSNJJOsbQdDAOWpO3tB6m.jCZe","roles":["admin"]}]
]]></system-out>
  </testcase>
  <testcase name="getAllnotes" classname="notes.EndpointTest" time="0.269">
    <system-out><![CDATA[Hibernate: 
    /* DELETE 
    FROM
        Note n */ delete 
    from
        Note_users
Hibernate: 
    /* DELETE 
    FROM
        Note n */ delete 
    from
        Note
Hibernate: 
    /* dynamic native SQL query */ ALTER SEQUENCE note_id_seq RESTART WITH 1
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* DELETE 
    FROM
        User */ delete 
    from
        Note_users
Hibernate: 
    /* DELETE 
    FROM
        User */ delete 
    from
        user_roles
Hibernate: 
    /* DELETE 
    FROM
        User */ delete 
    from
        users
Hibernate: 
    /* DELETE 
    FROM
        Role */ delete 
    from
        user_roles
Hibernate: 
    /* DELETE 
    FROM
        Role */ delete 
    from
        role
Hibernate: 
    /* insert for
        notes.ressources.Role */insert 
    into
        role (name) 
    values
        (?)
Hibernate: 
    /* insert for
        notes.ressources.Role */insert 
    into
        role (name) 
    values
        (?)
Hibernate: 
    /* insert for
        notes.ressources.User */insert 
    into
        users (password,email) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.User */insert 
    into
        users (password,email) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note.users */insert 
    into
        Note_users (notes_id,users_email) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note.users */insert 
    into
        Note_users (notes_id,users_email) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.User.roles */insert 
    into
        user_roles (user_name,role_name) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.User.roles */insert 
    into
        user_roles (user_name,role_name) 
    values
        (?,?)
USER IN LOGIN: UserDTO(email=user, password=user, roles=null)
Hibernate: 
    select
        u1_0.email,
        n1_0.users_email,
        n1_1.id,
        n1_1.category,
        n1_1.content,
        n1_1.date,
        n1_1.lastEditDate,
        n1_1.title,
        u1_0.password,
        r1_0.user_name,
        r1_1.name 
    from
        users u1_0 
    left join
        (Note_users n1_0 
    join
        Note n1_1 
            on n1_1.id=n1_0.notes_id) 
                on u1_0.email=n1_0.users_email 
        left join
            (user_roles r1_0 
        join
            role r1_1 
                on r1_1.name=r1_0.role_name) 
                    on u1_0.email=r1_0.user_name 
            where
                u1_0.email=?
Hibernate: 
    select
        u1_0.notes_id,
        u1_1.email,
        u1_1.password,
        r1_0.user_name,
        r1_1.name 
    from
        Note_users u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.users_email 
    left join
        (user_roles r1_0 
    join
        role r1_1 
            on r1_1.name=r1_0.role_name) 
                on u1_1.email=r1_0.user_name 
        where
            u1_0.notes_id=?
Hibernate: 
    select
        u1_0.role_name,
        u1_1.email,
        n1_0.users_email,
        n1_1.id,
        n1_1.category,
        n1_1.content,
        n1_1.date,
        n1_1.lastEditDate,
        n1_1.title,
        u1_1.password 
    from
        user_roles u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.user_name 
    left join
        (Note_users n1_0 
    join
        Note n1_1 
            on n1_1.id=n1_0.notes_id) 
                on u1_1.email=n1_0.users_email 
        where
            u1_0.role_name=?
Hibernate: 
    select
        u1_0.notes_id,
        u1_1.email,
        u1_1.password,
        r1_0.user_name,
        r1_1.name 
    from
        Note_users u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.users_email 
    left join
        (user_roles r1_0 
    join
        role r1_1 
            on r1_1.name=r1_0.role_name) 
                on u1_1.email=r1_0.user_name 
        where
            u1_0.notes_id=?
USER IN AUTHENTICATE: UserDTO(email=user, password=null, roles=[, user])
USER IN CHECK_SEC_ROLES: UserDTO(email=user, password=null, roles=[, user])
Hibernate: 
    /* SELECT
        n 
    FROM
        User u 
    JOIN
        u.notes n 
    WHERE
        u.email = :email */ select
            n1_1.id,
            n1_1.category,
            n1_1.content,
            n1_1.date,
            n1_1.lastEditDate,
            n1_1.title 
        from
            users u1_0 
        join
            (Note_users n1_0 
        join
            Note n1_1 
                on n1_1.id=n1_0.notes_id) 
                    on u1_0.email=n1_0.users_email 
            where
                u1_0.email=?
Hibernate: 
    select
        u1_0.notes_id,
        u1_1.email,
        u1_1.password,
        r1_0.user_name,
        r1_1.name 
    from
        Note_users u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.users_email 
    left join
        (user_roles r1_0 
    join
        role r1_1 
            on r1_1.name=r1_0.role_name) 
                on u1_1.email=r1_0.user_name 
        where
            u1_0.notes_id=?
Hibernate: 
    select
        u1_0.role_name,
        u1_1.email,
        n1_0.users_email,
        n1_1.id,
        n1_1.category,
        n1_1.content,
        n1_1.date,
        n1_1.lastEditDate,
        n1_1.title,
        u1_1.password 
    from
        user_roles u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.user_name 
    left join
        (Note_users n1_0 
    join
        Note n1_1 
            on n1_1.id=n1_0.notes_id) 
                on u1_1.email=n1_0.users_email 
        where
            u1_0.role_name=?
Hibernate: 
    select
        u1_0.notes_id,
        u1_1.email,
        u1_1.password,
        r1_0.user_name,
        r1_1.name 
    from
        Note_users u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.users_email 
    left join
        (user_roles r1_0 
    join
        role r1_1 
            on r1_1.name=r1_0.role_name) 
                on u1_1.email=r1_0.user_name 
        where
            u1_0.notes_id=?
]]></system-out>
  </testcase>
  <testcase name="updateNote" classname="notes.EndpointTest" time="0.282">
    <system-out><![CDATA[Hibernate: 
    /* DELETE 
    FROM
        Note n */ delete 
    from
        Note_users
Hibernate: 
    /* DELETE 
    FROM
        Note n */ delete 
    from
        Note
Hibernate: 
    /* dynamic native SQL query */ ALTER SEQUENCE note_id_seq RESTART WITH 1
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* DELETE 
    FROM
        User */ delete 
    from
        Note_users
Hibernate: 
    /* DELETE 
    FROM
        User */ delete 
    from
        user_roles
Hibernate: 
    /* DELETE 
    FROM
        User */ delete 
    from
        users
Hibernate: 
    /* DELETE 
    FROM
        Role */ delete 
    from
        user_roles
Hibernate: 
    /* DELETE 
    FROM
        Role */ delete 
    from
        role
Hibernate: 
    /* insert for
        notes.ressources.Role */insert 
    into
        role (name) 
    values
        (?)
Hibernate: 
    /* insert for
        notes.ressources.Role */insert 
    into
        role (name) 
    values
        (?)
Hibernate: 
    /* insert for
        notes.ressources.User */insert 
    into
        users (password,email) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.User */insert 
    into
        users (password,email) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note.users */insert 
    into
        Note_users (notes_id,users_email) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note.users */insert 
    into
        Note_users (notes_id,users_email) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.User.roles */insert 
    into
        user_roles (user_name,role_name) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.User.roles */insert 
    into
        user_roles (user_name,role_name) 
    values
        (?,?)
USER IN LOGIN: UserDTO(email=user, password=user, roles=null)
Hibernate: 
    select
        u1_0.email,
        n1_0.users_email,
        n1_1.id,
        n1_1.category,
        n1_1.content,
        n1_1.date,
        n1_1.lastEditDate,
        n1_1.title,
        u1_0.password,
        r1_0.user_name,
        r1_1.name 
    from
        users u1_0 
    left join
        (Note_users n1_0 
    join
        Note n1_1 
            on n1_1.id=n1_0.notes_id) 
                on u1_0.email=n1_0.users_email 
        left join
            (user_roles r1_0 
        join
            role r1_1 
                on r1_1.name=r1_0.role_name) 
                    on u1_0.email=r1_0.user_name 
            where
                u1_0.email=?
Hibernate: 
    select
        u1_0.notes_id,
        u1_1.email,
        u1_1.password,
        r1_0.user_name,
        r1_1.name 
    from
        Note_users u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.users_email 
    left join
        (user_roles r1_0 
    join
        role r1_1 
            on r1_1.name=r1_0.role_name) 
                on u1_1.email=r1_0.user_name 
        where
            u1_0.notes_id=?
Hibernate: 
    select
        u1_0.role_name,
        u1_1.email,
        n1_0.users_email,
        n1_1.id,
        n1_1.category,
        n1_1.content,
        n1_1.date,
        n1_1.lastEditDate,
        n1_1.title,
        u1_1.password 
    from
        user_roles u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.user_name 
    left join
        (Note_users n1_0 
    join
        Note n1_1 
            on n1_1.id=n1_0.notes_id) 
                on u1_1.email=n1_0.users_email 
        where
            u1_0.role_name=?
Hibernate: 
    select
        u1_0.notes_id,
        u1_1.email,
        u1_1.password,
        r1_0.user_name,
        r1_1.name 
    from
        Note_users u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.users_email 
    left join
        (user_roles r1_0 
    join
        role r1_1 
            on r1_1.name=r1_0.role_name) 
                on u1_1.email=r1_0.user_name 
        where
            u1_0.notes_id=?
USER IN AUTHENTICATE: UserDTO(email=user, password=null, roles=[, user])
USER IN CHECK_SEC_ROLES: UserDTO(email=user, password=null, roles=[, user])
Hibernate: 
    select
        n1_0.id,
        n1_0.category,
        n1_0.content,
        n1_0.date,
        n1_0.lastEditDate,
        n1_0.title,
        u1_0.notes_id,
        u1_1.email,
        u1_1.password,
        r1_0.user_name,
        r1_1.name 
    from
        Note n1_0 
    left join
        (Note_users u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.users_email) 
                on n1_0.id=u1_0.notes_id 
        left join
            (user_roles r1_0 
        join
            role r1_1 
                on r1_1.name=r1_0.role_name) 
                    on u1_1.email=r1_0.user_name 
            where
                n1_0.id=?
Hibernate: 
    select
        u1_0.role_name,
        u1_1.email,
        n1_0.users_email,
        n1_1.id,
        n1_1.category,
        n1_1.content,
        n1_1.date,
        n1_1.lastEditDate,
        n1_1.title,
        u1_1.password 
    from
        user_roles u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.user_name 
    left join
        (Note_users n1_0 
    join
        Note n1_1 
            on n1_1.id=n1_0.notes_id) 
                on u1_1.email=n1_0.users_email 
        where
            u1_0.role_name=?
Hibernate: 
    select
        u1_0.notes_id,
        u1_1.email,
        u1_1.password,
        r1_0.user_name,
        r1_1.name 
    from
        Note_users u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.users_email 
    left join
        (user_roles r1_0 
    join
        role r1_1 
            on r1_1.name=r1_0.role_name) 
                on u1_1.email=r1_0.user_name 
        where
            u1_0.notes_id=?
note:Note(id=1, title=title1, category=NOTE, date=2024-05-31, lastEditDate=null, content=this is the first note)
Hibernate: 
    select
        n1_0.id,
        n1_0.category,
        n1_0.content,
        n1_0.date,
        n1_0.lastEditDate,
        n1_0.title,
        u1_0.notes_id,
        u1_1.email,
        u1_1.password,
        r1_0.user_name,
        r1_1.name 
    from
        Note n1_0 
    left join
        (Note_users u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.users_email) 
                on n1_0.id=u1_0.notes_id 
        left join
            (user_roles r1_0 
        join
            role r1_1 
                on r1_1.name=r1_0.role_name) 
                    on u1_1.email=r1_0.user_name 
            where
                n1_0.id=?
Hibernate: 
    select
        u1_0.role_name,
        u1_1.email,
        n1_0.users_email,
        n1_1.id,
        n1_1.category,
        n1_1.content,
        n1_1.date,
        n1_1.lastEditDate,
        n1_1.title,
        u1_1.password 
    from
        user_roles u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.user_name 
    left join
        (Note_users n1_0 
    join
        Note n1_1 
            on n1_1.id=n1_0.notes_id) 
                on u1_1.email=n1_0.users_email 
        where
            u1_0.role_name=?
Hibernate: 
    select
        u1_0.notes_id,
        u1_1.email,
        u1_1.password,
        r1_0.user_name,
        r1_1.name 
    from
        Note_users u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.users_email 
    left join
        (user_roles r1_0 
    join
        role r1_1 
            on r1_1.name=r1_0.role_name) 
                on u1_1.email=r1_0.user_name 
        where
            u1_0.notes_id=?
Hibernate: 
    /* update
        for notes.ressources.Note */update Note 
    set
        category=?,
        content=?,
        date=?,
        lastEditDate=?,
        title=? 
    where
        id=?
HTTP/1.1 200 OK
Date: Fri, 31 May 2024 14:20:41 GMT
Content-Type: application/json
Content-Length: 102

{"id":1,"title":"test","content":"test","category":"NOTE","colaborators":["user"],"date":"2024-05-31"}
]]></system-out>
  </testcase>
  <testcase name="updateUser" classname="notes.EndpointTest" time="0.308">
    <system-out><![CDATA[Hibernate: 
    /* DELETE 
    FROM
        Note n */ delete 
    from
        Note_users
Hibernate: 
    /* DELETE 
    FROM
        Note n */ delete 
    from
        Note
Hibernate: 
    /* dynamic native SQL query */ ALTER SEQUENCE note_id_seq RESTART WITH 1
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* DELETE 
    FROM
        User */ delete 
    from
        Note_users
Hibernate: 
    /* DELETE 
    FROM
        User */ delete 
    from
        user_roles
Hibernate: 
    /* DELETE 
    FROM
        User */ delete 
    from
        users
Hibernate: 
    /* DELETE 
    FROM
        Role */ delete 
    from
        user_roles
Hibernate: 
    /* DELETE 
    FROM
        Role */ delete 
    from
        role
Hibernate: 
    /* insert for
        notes.ressources.Role */insert 
    into
        role (name) 
    values
        (?)
Hibernate: 
    /* insert for
        notes.ressources.Role */insert 
    into
        role (name) 
    values
        (?)
Hibernate: 
    /* insert for
        notes.ressources.User */insert 
    into
        users (password,email) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.User */insert 
    into
        users (password,email) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note.users */insert 
    into
        Note_users (notes_id,users_email) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note.users */insert 
    into
        Note_users (notes_id,users_email) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.User.roles */insert 
    into
        user_roles (user_name,role_name) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.User.roles */insert 
    into
        user_roles (user_name,role_name) 
    values
        (?,?)
USER IN LOGIN: UserDTO(email=admin, password=admin, roles=null)
Hibernate: 
    select
        u1_0.email,
        n1_0.users_email,
        n1_1.id,
        n1_1.category,
        n1_1.content,
        n1_1.date,
        n1_1.lastEditDate,
        n1_1.title,
        u1_0.password,
        r1_0.user_name,
        r1_1.name 
    from
        users u1_0 
    left join
        (Note_users n1_0 
    join
        Note n1_1 
            on n1_1.id=n1_0.notes_id) 
                on u1_0.email=n1_0.users_email 
        left join
            (user_roles r1_0 
        join
            role r1_1 
                on r1_1.name=r1_0.role_name) 
                    on u1_0.email=r1_0.user_name 
            where
                u1_0.email=?
Hibernate: 
    select
        u1_0.role_name,
        u1_1.email,
        n1_0.users_email,
        n1_1.id,
        n1_1.category,
        n1_1.content,
        n1_1.date,
        n1_1.lastEditDate,
        n1_1.title,
        u1_1.password 
    from
        user_roles u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.user_name 
    left join
        (Note_users n1_0 
    join
        Note n1_1 
            on n1_1.id=n1_0.notes_id) 
                on u1_1.email=n1_0.users_email 
        where
            u1_0.role_name=?
USER IN AUTHENTICATE: UserDTO(email=admin, password=null, roles=[, admin])
USER IN CHECK_SEC_ROLES: UserDTO(email=admin, password=null, roles=[, admin])
Hibernate: 
    select
        u1_0.email,
        n1_0.users_email,
        n1_1.id,
        n1_1.category,
        n1_1.content,
        n1_1.date,
        n1_1.lastEditDate,
        n1_1.title,
        u1_0.password,
        r1_0.user_name,
        r1_1.name 
    from
        users u1_0 
    left join
        (Note_users n1_0 
    join
        Note n1_1 
            on n1_1.id=n1_0.notes_id) 
                on u1_0.email=n1_0.users_email 
        left join
            (user_roles r1_0 
        join
            role r1_1 
                on r1_1.name=r1_0.role_name) 
                    on u1_0.email=r1_0.user_name 
            where
                u1_0.email=?
Hibernate: 
    select
        u1_0.notes_id,
        u1_1.email,
        u1_1.password,
        r1_0.user_name,
        r1_1.name 
    from
        Note_users u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.users_email 
    left join
        (user_roles r1_0 
    join
        role r1_1 
            on r1_1.name=r1_0.role_name) 
                on u1_1.email=r1_0.user_name 
        where
            u1_0.notes_id=?
Hibernate: 
    select
        u1_0.role_name,
        u1_1.email,
        n1_0.users_email,
        n1_1.id,
        n1_1.category,
        n1_1.content,
        n1_1.date,
        n1_1.lastEditDate,
        n1_1.title,
        u1_1.password 
    from
        user_roles u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.user_name 
    left join
        (Note_users n1_0 
    join
        Note n1_1 
            on n1_1.id=n1_0.notes_id) 
                on u1_1.email=n1_0.users_email 
        where
            u1_0.role_name=?
Hibernate: 
    select
        u1_0.notes_id,
        u1_1.email,
        u1_1.password,
        r1_0.user_name,
        r1_1.name 
    from
        Note_users u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.users_email 
    left join
        (user_roles r1_0 
    join
        role r1_1 
            on r1_1.name=r1_0.role_name) 
                on u1_1.email=r1_0.user_name 
        where
            u1_0.notes_id=?
Hibernate: 
    select
        r1_0.name,
        u1_0.role_name,
        u1_1.email,
        n1_0.users_email,
        n1_1.id,
        n1_1.category,
        n1_1.content,
        n1_1.date,
        n1_1.lastEditDate,
        n1_1.title,
        u1_1.password 
    from
        role r1_0 
    left join
        (user_roles u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.user_name) 
                on r1_0.name=u1_0.role_name 
        left join
            (Note_users n1_0 
        join
            Note n1_1 
                on n1_1.id=n1_0.notes_id) 
                    on u1_1.email=n1_0.users_email 
            where
                r1_0.name=?
Hibernate: 
    select
        u1_0.notes_id,
        u1_1.email,
        u1_1.password,
        r1_0.user_name,
        r1_1.name 
    from
        Note_users u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.users_email 
    left join
        (user_roles r1_0 
    join
        role r1_1 
            on r1_1.name=r1_0.role_name) 
                on u1_1.email=r1_0.user_name 
        where
            u1_0.notes_id=?
Hibernate: 
    select
        u1_0.notes_id,
        u1_1.email,
        u1_1.password,
        r1_0.user_name,
        r1_1.name 
    from
        Note_users u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.users_email 
    left join
        (user_roles r1_0 
    join
        role r1_1 
            on r1_1.name=r1_0.role_name) 
                on u1_1.email=r1_0.user_name 
        where
            u1_0.notes_id=?
Hibernate: 
    /* update
        for notes.ressources.User */update users 
    set
        password=? 
    where
        email=?
HTTP/1.1 200 OK
Date: Fri, 31 May 2024 14:20:41 GMT
Content-Type: application/json
Content-Length: 107

{"email":"user","password":"$2a$10$r6iW4C1.gT2plBsmzqY5detfZBa4uyGDCiwjcZb9E2NYWlyoXaKsS","roles":["user"]}
]]></system-out>
  </testcase>
  <testcase name="sortNotesByCategory" classname="notes.EndpointTest" time="0.243">
    <system-out><![CDATA[Hibernate: 
    /* DELETE 
    FROM
        Note n */ delete 
    from
        Note_users
Hibernate: 
    /* DELETE 
    FROM
        Note n */ delete 
    from
        Note
Hibernate: 
    /* dynamic native SQL query */ ALTER SEQUENCE note_id_seq RESTART WITH 1
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* DELETE 
    FROM
        User */ delete 
    from
        Note_users
Hibernate: 
    /* DELETE 
    FROM
        User */ delete 
    from
        user_roles
Hibernate: 
    /* DELETE 
    FROM
        User */ delete 
    from
        users
Hibernate: 
    /* DELETE 
    FROM
        Role */ delete 
    from
        user_roles
Hibernate: 
    /* DELETE 
    FROM
        Role */ delete 
    from
        role
Hibernate: 
    /* insert for
        notes.ressources.Role */insert 
    into
        role (name) 
    values
        (?)
Hibernate: 
    /* insert for
        notes.ressources.Role */insert 
    into
        role (name) 
    values
        (?)
Hibernate: 
    /* insert for
        notes.ressources.User */insert 
    into
        users (password,email) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.User */insert 
    into
        users (password,email) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note.users */insert 
    into
        Note_users (notes_id,users_email) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note.users */insert 
    into
        Note_users (notes_id,users_email) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.User.roles */insert 
    into
        user_roles (user_name,role_name) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.User.roles */insert 
    into
        user_roles (user_name,role_name) 
    values
        (?,?)
USER IN LOGIN: UserDTO(email=user, password=user, roles=null)
Hibernate: 
    select
        u1_0.email,
        n1_0.users_email,
        n1_1.id,
        n1_1.category,
        n1_1.content,
        n1_1.date,
        n1_1.lastEditDate,
        n1_1.title,
        u1_0.password,
        r1_0.user_name,
        r1_1.name 
    from
        users u1_0 
    left join
        (Note_users n1_0 
    join
        Note n1_1 
            on n1_1.id=n1_0.notes_id) 
                on u1_0.email=n1_0.users_email 
        left join
            (user_roles r1_0 
        join
            role r1_1 
                on r1_1.name=r1_0.role_name) 
                    on u1_0.email=r1_0.user_name 
            where
                u1_0.email=?
Hibernate: 
    select
        u1_0.notes_id,
        u1_1.email,
        u1_1.password,
        r1_0.user_name,
        r1_1.name 
    from
        Note_users u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.users_email 
    left join
        (user_roles r1_0 
    join
        role r1_1 
            on r1_1.name=r1_0.role_name) 
                on u1_1.email=r1_0.user_name 
        where
            u1_0.notes_id=?
Hibernate: 
    select
        u1_0.role_name,
        u1_1.email,
        n1_0.users_email,
        n1_1.id,
        n1_1.category,
        n1_1.content,
        n1_1.date,
        n1_1.lastEditDate,
        n1_1.title,
        u1_1.password 
    from
        user_roles u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.user_name 
    left join
        (Note_users n1_0 
    join
        Note n1_1 
            on n1_1.id=n1_0.notes_id) 
                on u1_1.email=n1_0.users_email 
        where
            u1_0.role_name=?
Hibernate: 
    select
        u1_0.notes_id,
        u1_1.email,
        u1_1.password,
        r1_0.user_name,
        r1_1.name 
    from
        Note_users u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.users_email 
    left join
        (user_roles r1_0 
    join
        role r1_1 
            on r1_1.name=r1_0.role_name) 
                on u1_1.email=r1_0.user_name 
        where
            u1_0.notes_id=?
USER IN AUTHENTICATE: UserDTO(email=user, password=null, roles=[, user])
USER IN CHECK_SEC_ROLES: UserDTO(email=user, password=null, roles=[, user])
Hibernate: 
    /* SELECT
        n 
    FROM
        User u 
    JOIN
        u.notes n 
    WHERE
        u.email = :email */ select
            n1_1.id,
            n1_1.category,
            n1_1.content,
            n1_1.date,
            n1_1.lastEditDate,
            n1_1.title 
        from
            users u1_0 
        join
            (Note_users n1_0 
        join
            Note n1_1 
                on n1_1.id=n1_0.notes_id) 
                    on u1_0.email=n1_0.users_email 
            where
                u1_0.email=?
Hibernate: 
    select
        u1_0.notes_id,
        u1_1.email,
        u1_1.password,
        r1_0.user_name,
        r1_1.name 
    from
        Note_users u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.users_email 
    left join
        (user_roles r1_0 
    join
        role r1_1 
            on r1_1.name=r1_0.role_name) 
                on u1_1.email=r1_0.user_name 
        where
            u1_0.notes_id=?
Hibernate: 
    select
        u1_0.role_name,
        u1_1.email,
        n1_0.users_email,
        n1_1.id,
        n1_1.category,
        n1_1.content,
        n1_1.date,
        n1_1.lastEditDate,
        n1_1.title,
        u1_1.password 
    from
        user_roles u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.user_name 
    left join
        (Note_users n1_0 
    join
        Note n1_1 
            on n1_1.id=n1_0.notes_id) 
                on u1_1.email=n1_0.users_email 
        where
            u1_0.role_name=?
Hibernate: 
    select
        u1_0.notes_id,
        u1_1.email,
        u1_1.password,
        r1_0.user_name,
        r1_1.name 
    from
        Note_users u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.users_email 
    left join
        (user_roles r1_0 
    join
        role r1_1 
            on r1_1.name=r1_0.role_name) 
                on u1_1.email=r1_0.user_name 
        where
            u1_0.notes_id=?
HTTP/1.1 200 OK
Date: Fri, 31 May 2024 14:20:41 GMT
Content-Type: application/json
Content-Length: 252

[{"id":1,"title":"title1","content":"this is the first note","category":"NOTE","colaborators":["user"],"date":"2024-05-31"},{"id":2,"title":"title2","content":"this is the second note","category":"REMINDER","colaborators":["user"],"date":"2024-05-31"}]
]]></system-out>
  </testcase>
  <testcase name="sortNotesByTitle" classname="notes.EndpointTest" time="0.25">
    <system-out><![CDATA[Hibernate: 
    /* DELETE 
    FROM
        Note n */ delete 
    from
        Note_users
Hibernate: 
    /* DELETE 
    FROM
        Note n */ delete 
    from
        Note
Hibernate: 
    /* dynamic native SQL query */ ALTER SEQUENCE note_id_seq RESTART WITH 1
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* DELETE 
    FROM
        User */ delete 
    from
        Note_users
Hibernate: 
    /* DELETE 
    FROM
        User */ delete 
    from
        user_roles
Hibernate: 
    /* DELETE 
    FROM
        User */ delete 
    from
        users
Hibernate: 
    /* DELETE 
    FROM
        Role */ delete 
    from
        user_roles
Hibernate: 
    /* DELETE 
    FROM
        Role */ delete 
    from
        role
Hibernate: 
    /* insert for
        notes.ressources.Role */insert 
    into
        role (name) 
    values
        (?)
Hibernate: 
    /* insert for
        notes.ressources.Role */insert 
    into
        role (name) 
    values
        (?)
Hibernate: 
    /* insert for
        notes.ressources.User */insert 
    into
        users (password,email) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.User */insert 
    into
        users (password,email) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note.users */insert 
    into
        Note_users (notes_id,users_email) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note.users */insert 
    into
        Note_users (notes_id,users_email) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.User.roles */insert 
    into
        user_roles (user_name,role_name) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.User.roles */insert 
    into
        user_roles (user_name,role_name) 
    values
        (?,?)
USER IN LOGIN: UserDTO(email=user, password=user, roles=null)
Hibernate: 
    select
        u1_0.email,
        n1_0.users_email,
        n1_1.id,
        n1_1.category,
        n1_1.content,
        n1_1.date,
        n1_1.lastEditDate,
        n1_1.title,
        u1_0.password,
        r1_0.user_name,
        r1_1.name 
    from
        users u1_0 
    left join
        (Note_users n1_0 
    join
        Note n1_1 
            on n1_1.id=n1_0.notes_id) 
                on u1_0.email=n1_0.users_email 
        left join
            (user_roles r1_0 
        join
            role r1_1 
                on r1_1.name=r1_0.role_name) 
                    on u1_0.email=r1_0.user_name 
            where
                u1_0.email=?
Hibernate: 
    select
        u1_0.notes_id,
        u1_1.email,
        u1_1.password,
        r1_0.user_name,
        r1_1.name 
    from
        Note_users u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.users_email 
    left join
        (user_roles r1_0 
    join
        role r1_1 
            on r1_1.name=r1_0.role_name) 
                on u1_1.email=r1_0.user_name 
        where
            u1_0.notes_id=?
Hibernate: 
    select
        u1_0.role_name,
        u1_1.email,
        n1_0.users_email,
        n1_1.id,
        n1_1.category,
        n1_1.content,
        n1_1.date,
        n1_1.lastEditDate,
        n1_1.title,
        u1_1.password 
    from
        user_roles u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.user_name 
    left join
        (Note_users n1_0 
    join
        Note n1_1 
            on n1_1.id=n1_0.notes_id) 
                on u1_1.email=n1_0.users_email 
        where
            u1_0.role_name=?
Hibernate: 
    select
        u1_0.notes_id,
        u1_1.email,
        u1_1.password,
        r1_0.user_name,
        r1_1.name 
    from
        Note_users u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.users_email 
    left join
        (user_roles r1_0 
    join
        role r1_1 
            on r1_1.name=r1_0.role_name) 
                on u1_1.email=r1_0.user_name 
        where
            u1_0.notes_id=?
USER IN AUTHENTICATE: UserDTO(email=user, password=null, roles=[, user])
USER IN CHECK_SEC_ROLES: UserDTO(email=user, password=null, roles=[, user])
Hibernate: 
    /* SELECT
        n 
    FROM
        User u 
    JOIN
        u.notes n 
    WHERE
        u.email = :email */ select
            n1_1.id,
            n1_1.category,
            n1_1.content,
            n1_1.date,
            n1_1.lastEditDate,
            n1_1.title 
        from
            users u1_0 
        join
            (Note_users n1_0 
        join
            Note n1_1 
                on n1_1.id=n1_0.notes_id) 
                    on u1_0.email=n1_0.users_email 
            where
                u1_0.email=?
Hibernate: 
    select
        u1_0.notes_id,
        u1_1.email,
        u1_1.password,
        r1_0.user_name,
        r1_1.name 
    from
        Note_users u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.users_email 
    left join
        (user_roles r1_0 
    join
        role r1_1 
            on r1_1.name=r1_0.role_name) 
                on u1_1.email=r1_0.user_name 
        where
            u1_0.notes_id=?
Hibernate: 
    select
        u1_0.role_name,
        u1_1.email,
        n1_0.users_email,
        n1_1.id,
        n1_1.category,
        n1_1.content,
        n1_1.date,
        n1_1.lastEditDate,
        n1_1.title,
        u1_1.password 
    from
        user_roles u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.user_name 
    left join
        (Note_users n1_0 
    join
        Note n1_1 
            on n1_1.id=n1_0.notes_id) 
                on u1_1.email=n1_0.users_email 
        where
            u1_0.role_name=?
Hibernate: 
    select
        u1_0.notes_id,
        u1_1.email,
        u1_1.password,
        r1_0.user_name,
        r1_1.name 
    from
        Note_users u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.users_email 
    left join
        (user_roles r1_0 
    join
        role r1_1 
            on r1_1.name=r1_0.role_name) 
                on u1_1.email=r1_0.user_name 
        where
            u1_0.notes_id=?
HTTP/1.1 200 OK
Date: Fri, 31 May 2024 14:20:42 GMT
Content-Type: application/json
Content-Length: 252

[{"id":1,"title":"title1","content":"this is the first note","category":"NOTE","colaborators":["user"],"date":"2024-05-31"},{"id":2,"title":"title2","content":"this is the second note","category":"REMINDER","colaborators":["user"],"date":"2024-05-31"}]
]]></system-out>
  </testcase>
  <testcase name="createNote" classname="notes.EndpointTest" time="0.307">
    <system-out><![CDATA[Hibernate: 
    /* DELETE 
    FROM
        Note n */ delete 
    from
        Note_users
Hibernate: 
    /* DELETE 
    FROM
        Note n */ delete 
    from
        Note
Hibernate: 
    /* dynamic native SQL query */ ALTER SEQUENCE note_id_seq RESTART WITH 1
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* DELETE 
    FROM
        User */ delete 
    from
        Note_users
Hibernate: 
    /* DELETE 
    FROM
        User */ delete 
    from
        user_roles
Hibernate: 
    /* DELETE 
    FROM
        User */ delete 
    from
        users
Hibernate: 
    /* DELETE 
    FROM
        Role */ delete 
    from
        user_roles
Hibernate: 
    /* DELETE 
    FROM
        Role */ delete 
    from
        role
Hibernate: 
    /* insert for
        notes.ressources.Role */insert 
    into
        role (name) 
    values
        (?)
Hibernate: 
    /* insert for
        notes.ressources.Role */insert 
    into
        role (name) 
    values
        (?)
Hibernate: 
    /* insert for
        notes.ressources.User */insert 
    into
        users (password,email) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.User */insert 
    into
        users (password,email) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note.users */insert 
    into
        Note_users (notes_id,users_email) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note.users */insert 
    into
        Note_users (notes_id,users_email) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.User.roles */insert 
    into
        user_roles (user_name,role_name) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.User.roles */insert 
    into
        user_roles (user_name,role_name) 
    values
        (?,?)
USER IN LOGIN: UserDTO(email=user, password=user, roles=null)
Hibernate: 
    select
        u1_0.email,
        n1_0.users_email,
        n1_1.id,
        n1_1.category,
        n1_1.content,
        n1_1.date,
        n1_1.lastEditDate,
        n1_1.title,
        u1_0.password,
        r1_0.user_name,
        r1_1.name 
    from
        users u1_0 
    left join
        (Note_users n1_0 
    join
        Note n1_1 
            on n1_1.id=n1_0.notes_id) 
                on u1_0.email=n1_0.users_email 
        left join
            (user_roles r1_0 
        join
            role r1_1 
                on r1_1.name=r1_0.role_name) 
                    on u1_0.email=r1_0.user_name 
            where
                u1_0.email=?
Hibernate: 
    select
        u1_0.notes_id,
        u1_1.email,
        u1_1.password,
        r1_0.user_name,
        r1_1.name 
    from
        Note_users u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.users_email 
    left join
        (user_roles r1_0 
    join
        role r1_1 
            on r1_1.name=r1_0.role_name) 
                on u1_1.email=r1_0.user_name 
        where
            u1_0.notes_id=?
Hibernate: 
    select
        u1_0.role_name,
        u1_1.email,
        n1_0.users_email,
        n1_1.id,
        n1_1.category,
        n1_1.content,
        n1_1.date,
        n1_1.lastEditDate,
        n1_1.title,
        u1_1.password 
    from
        user_roles u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.user_name 
    left join
        (Note_users n1_0 
    join
        Note n1_1 
            on n1_1.id=n1_0.notes_id) 
                on u1_1.email=n1_0.users_email 
        where
            u1_0.role_name=?
Hibernate: 
    select
        u1_0.notes_id,
        u1_1.email,
        u1_1.password,
        r1_0.user_name,
        r1_1.name 
    from
        Note_users u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.users_email 
    left join
        (user_roles r1_0 
    join
        role r1_1 
            on r1_1.name=r1_0.role_name) 
                on u1_1.email=r1_0.user_name 
        where
            u1_0.notes_id=?
USER IN AUTHENTICATE: UserDTO(email=user, password=null, roles=[, user])
USER IN CHECK_SEC_ROLES: UserDTO(email=user, password=null, roles=[, user])
Hibernate: 
    select
        u1_0.email,
        n1_0.users_email,
        n1_1.id,
        n1_1.category,
        n1_1.content,
        n1_1.date,
        n1_1.lastEditDate,
        n1_1.title,
        u1_0.password,
        r1_0.user_name,
        r1_1.name 
    from
        users u1_0 
    left join
        (Note_users n1_0 
    join
        Note n1_1 
            on n1_1.id=n1_0.notes_id) 
                on u1_0.email=n1_0.users_email 
        left join
            (user_roles r1_0 
        join
            role r1_1 
                on r1_1.name=r1_0.role_name) 
                    on u1_0.email=r1_0.user_name 
            where
                u1_0.email=?
Hibernate: 
    select
        u1_0.notes_id,
        u1_1.email,
        u1_1.password,
        r1_0.user_name,
        r1_1.name 
    from
        Note_users u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.users_email 
    left join
        (user_roles r1_0 
    join
        role r1_1 
            on r1_1.name=r1_0.role_name) 
                on u1_1.email=r1_0.user_name 
        where
            u1_0.notes_id=?
Hibernate: 
    select
        u1_0.role_name,
        u1_1.email,
        n1_0.users_email,
        n1_1.id,
        n1_1.category,
        n1_1.content,
        n1_1.date,
        n1_1.lastEditDate,
        n1_1.title,
        u1_1.password 
    from
        user_roles u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.user_name 
    left join
        (Note_users n1_0 
    join
        Note n1_1 
            on n1_1.id=n1_0.notes_id) 
                on u1_1.email=n1_0.users_email 
        where
            u1_0.role_name=?
Hibernate: 
    select
        u1_0.notes_id,
        u1_1.email,
        u1_1.password,
        r1_0.user_name,
        r1_1.name 
    from
        Note_users u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.users_email 
    left join
        (user_roles r1_0 
    join
        role r1_1 
            on r1_1.name=r1_0.role_name) 
                on u1_1.email=r1_0.user_name 
        where
            u1_0.notes_id=?
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note.users */insert 
    into
        Note_users (notes_id,users_email) 
    values
        (?,?)
HTTP/1.1 201 Created
Date: Fri, 31 May 2024 14:20:42 GMT
Content-Type: application/json
Content-Length: 102

{"id":5,"title":"test","content":"test","category":"NOTE","colaborators":["user"],"date":"2024-05-31"}
]]></system-out>
  </testcase>
  <testcase name="getNoteByTitle" classname="notes.EndpointTest" time="0.256">
    <system-out><![CDATA[Hibernate: 
    /* DELETE 
    FROM
        Note n */ delete 
    from
        Note_users
Hibernate: 
    /* DELETE 
    FROM
        Note n */ delete 
    from
        Note
Hibernate: 
    /* dynamic native SQL query */ ALTER SEQUENCE note_id_seq RESTART WITH 1
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* DELETE 
    FROM
        User */ delete 
    from
        Note_users
Hibernate: 
    /* DELETE 
    FROM
        User */ delete 
    from
        user_roles
Hibernate: 
    /* DELETE 
    FROM
        User */ delete 
    from
        users
Hibernate: 
    /* DELETE 
    FROM
        Role */ delete 
    from
        user_roles
Hibernate: 
    /* DELETE 
    FROM
        Role */ delete 
    from
        role
Hibernate: 
    /* insert for
        notes.ressources.Role */insert 
    into
        role (name) 
    values
        (?)
Hibernate: 
    /* insert for
        notes.ressources.Role */insert 
    into
        role (name) 
    values
        (?)
Hibernate: 
    /* insert for
        notes.ressources.User */insert 
    into
        users (password,email) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.User */insert 
    into
        users (password,email) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note.users */insert 
    into
        Note_users (notes_id,users_email) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note.users */insert 
    into
        Note_users (notes_id,users_email) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.User.roles */insert 
    into
        user_roles (user_name,role_name) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.User.roles */insert 
    into
        user_roles (user_name,role_name) 
    values
        (?,?)
USER IN LOGIN: UserDTO(email=user, password=user, roles=null)
Hibernate: 
    select
        u1_0.email,
        n1_0.users_email,
        n1_1.id,
        n1_1.category,
        n1_1.content,
        n1_1.date,
        n1_1.lastEditDate,
        n1_1.title,
        u1_0.password,
        r1_0.user_name,
        r1_1.name 
    from
        users u1_0 
    left join
        (Note_users n1_0 
    join
        Note n1_1 
            on n1_1.id=n1_0.notes_id) 
                on u1_0.email=n1_0.users_email 
        left join
            (user_roles r1_0 
        join
            role r1_1 
                on r1_1.name=r1_0.role_name) 
                    on u1_0.email=r1_0.user_name 
            where
                u1_0.email=?
Hibernate: 
    select
        u1_0.notes_id,
        u1_1.email,
        u1_1.password,
        r1_0.user_name,
        r1_1.name 
    from
        Note_users u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.users_email 
    left join
        (user_roles r1_0 
    join
        role r1_1 
            on r1_1.name=r1_0.role_name) 
                on u1_1.email=r1_0.user_name 
        where
            u1_0.notes_id=?
Hibernate: 
    select
        u1_0.role_name,
        u1_1.email,
        n1_0.users_email,
        n1_1.id,
        n1_1.category,
        n1_1.content,
        n1_1.date,
        n1_1.lastEditDate,
        n1_1.title,
        u1_1.password 
    from
        user_roles u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.user_name 
    left join
        (Note_users n1_0 
    join
        Note n1_1 
            on n1_1.id=n1_0.notes_id) 
                on u1_1.email=n1_0.users_email 
        where
            u1_0.role_name=?
Hibernate: 
    select
        u1_0.notes_id,
        u1_1.email,
        u1_1.password,
        r1_0.user_name,
        r1_1.name 
    from
        Note_users u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.users_email 
    left join
        (user_roles r1_0 
    join
        role r1_1 
            on r1_1.name=r1_0.role_name) 
                on u1_1.email=r1_0.user_name 
        where
            u1_0.notes_id=?
USER IN AUTHENTICATE: UserDTO(email=user, password=null, roles=[, user])
USER IN CHECK_SEC_ROLES: UserDTO(email=user, password=null, roles=[, user])
Hibernate: 
    /* SELECT
        n 
    FROM
        User u 
    JOIN
        u.notes n 
    WHERE
        u.email = :email */ select
            n1_1.id,
            n1_1.category,
            n1_1.content,
            n1_1.date,
            n1_1.lastEditDate,
            n1_1.title 
        from
            users u1_0 
        join
            (Note_users n1_0 
        join
            Note n1_1 
                on n1_1.id=n1_0.notes_id) 
                    on u1_0.email=n1_0.users_email 
            where
                u1_0.email=?
Hibernate: 
    select
        u1_0.notes_id,
        u1_1.email,
        u1_1.password,
        r1_0.user_name,
        r1_1.name 
    from
        Note_users u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.users_email 
    left join
        (user_roles r1_0 
    join
        role r1_1 
            on r1_1.name=r1_0.role_name) 
                on u1_1.email=r1_0.user_name 
        where
            u1_0.notes_id=?
Hibernate: 
    select
        u1_0.role_name,
        u1_1.email,
        n1_0.users_email,
        n1_1.id,
        n1_1.category,
        n1_1.content,
        n1_1.date,
        n1_1.lastEditDate,
        n1_1.title,
        u1_1.password 
    from
        user_roles u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.user_name 
    left join
        (Note_users n1_0 
    join
        Note n1_1 
            on n1_1.id=n1_0.notes_id) 
                on u1_1.email=n1_0.users_email 
        where
            u1_0.role_name=?
Hibernate: 
    select
        u1_0.notes_id,
        u1_1.email,
        u1_1.password,
        r1_0.user_name,
        r1_1.name 
    from
        Note_users u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.users_email 
    left join
        (user_roles r1_0 
    join
        role r1_1 
            on r1_1.name=r1_0.role_name) 
                on u1_1.email=r1_0.user_name 
        where
            u1_0.notes_id=?
HTTP/1.1 200 OK
Date: Fri, 31 May 2024 14:20:42 GMT
Content-Type: application/json
Content-Length: 252

[{"id":1,"title":"title1","content":"this is the first note","category":"NOTE","colaborators":["user"],"date":"2024-05-31"},{"id":2,"title":"title2","content":"this is the second note","category":"REMINDER","colaborators":["user"],"date":"2024-05-31"}]
]]></system-out>
  </testcase>
  <testcase name="deleteNote" classname="notes.EndpointTest" time="0.282">
    <system-out><![CDATA[Hibernate: 
    /* DELETE 
    FROM
        Note n */ delete 
    from
        Note_users
Hibernate: 
    /* DELETE 
    FROM
        Note n */ delete 
    from
        Note
Hibernate: 
    /* dynamic native SQL query */ ALTER SEQUENCE note_id_seq RESTART WITH 1
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* DELETE 
    FROM
        User */ delete 
    from
        Note_users
Hibernate: 
    /* DELETE 
    FROM
        User */ delete 
    from
        user_roles
Hibernate: 
    /* DELETE 
    FROM
        User */ delete 
    from
        users
Hibernate: 
    /* DELETE 
    FROM
        Role */ delete 
    from
        user_roles
Hibernate: 
    /* DELETE 
    FROM
        Role */ delete 
    from
        role
Hibernate: 
    /* insert for
        notes.ressources.Role */insert 
    into
        role (name) 
    values
        (?)
Hibernate: 
    /* insert for
        notes.ressources.Role */insert 
    into
        role (name) 
    values
        (?)
Hibernate: 
    /* insert for
        notes.ressources.User */insert 
    into
        users (password,email) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.User */insert 
    into
        users (password,email) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note.users */insert 
    into
        Note_users (notes_id,users_email) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note.users */insert 
    into
        Note_users (notes_id,users_email) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.User.roles */insert 
    into
        user_roles (user_name,role_name) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.User.roles */insert 
    into
        user_roles (user_name,role_name) 
    values
        (?,?)
USER IN LOGIN: UserDTO(email=user, password=user, roles=null)
Hibernate: 
    select
        u1_0.email,
        n1_0.users_email,
        n1_1.id,
        n1_1.category,
        n1_1.content,
        n1_1.date,
        n1_1.lastEditDate,
        n1_1.title,
        u1_0.password,
        r1_0.user_name,
        r1_1.name 
    from
        users u1_0 
    left join
        (Note_users n1_0 
    join
        Note n1_1 
            on n1_1.id=n1_0.notes_id) 
                on u1_0.email=n1_0.users_email 
        left join
            (user_roles r1_0 
        join
            role r1_1 
                on r1_1.name=r1_0.role_name) 
                    on u1_0.email=r1_0.user_name 
            where
                u1_0.email=?
Hibernate: 
    select
        u1_0.notes_id,
        u1_1.email,
        u1_1.password,
        r1_0.user_name,
        r1_1.name 
    from
        Note_users u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.users_email 
    left join
        (user_roles r1_0 
    join
        role r1_1 
            on r1_1.name=r1_0.role_name) 
                on u1_1.email=r1_0.user_name 
        where
            u1_0.notes_id=?
Hibernate: 
    select
        u1_0.role_name,
        u1_1.email,
        n1_0.users_email,
        n1_1.id,
        n1_1.category,
        n1_1.content,
        n1_1.date,
        n1_1.lastEditDate,
        n1_1.title,
        u1_1.password 
    from
        user_roles u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.user_name 
    left join
        (Note_users n1_0 
    join
        Note n1_1 
            on n1_1.id=n1_0.notes_id) 
                on u1_1.email=n1_0.users_email 
        where
            u1_0.role_name=?
Hibernate: 
    select
        u1_0.notes_id,
        u1_1.email,
        u1_1.password,
        r1_0.user_name,
        r1_1.name 
    from
        Note_users u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.users_email 
    left join
        (user_roles r1_0 
    join
        role r1_1 
            on r1_1.name=r1_0.role_name) 
                on u1_1.email=r1_0.user_name 
        where
            u1_0.notes_id=?
USER IN AUTHENTICATE: UserDTO(email=user, password=null, roles=[, user])
USER IN CHECK_SEC_ROLES: UserDTO(email=user, password=null, roles=[, user])
Hibernate: 
    select
        n1_0.id,
        n1_0.category,
        n1_0.content,
        n1_0.date,
        n1_0.lastEditDate,
        n1_0.title,
        u1_0.notes_id,
        u1_1.email,
        u1_1.password,
        r1_0.user_name,
        r1_1.name 
    from
        Note n1_0 
    left join
        (Note_users u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.users_email) 
                on n1_0.id=u1_0.notes_id 
        left join
            (user_roles r1_0 
        join
            role r1_1 
                on r1_1.name=r1_0.role_name) 
                    on u1_1.email=r1_0.user_name 
            where
                n1_0.id=?
Hibernate: 
    select
        u1_0.role_name,
        u1_1.email,
        n1_0.users_email,
        n1_1.id,
        n1_1.category,
        n1_1.content,
        n1_1.date,
        n1_1.lastEditDate,
        n1_1.title,
        u1_1.password 
    from
        user_roles u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.user_name 
    left join
        (Note_users n1_0 
    join
        Note n1_1 
            on n1_1.id=n1_0.notes_id) 
                on u1_1.email=n1_0.users_email 
        where
            u1_0.role_name=?
Hibernate: 
    select
        u1_0.notes_id,
        u1_1.email,
        u1_1.password,
        r1_0.user_name,
        r1_1.name 
    from
        Note_users u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.users_email 
    left join
        (user_roles r1_0 
    join
        role r1_1 
            on r1_1.name=r1_0.role_name) 
                on u1_1.email=r1_0.user_name 
        where
            u1_0.notes_id=?
Hibernate: 
    /* one-shot delete for notes.ressources.Note.users */delete 
    from
        Note_users 
    where
        notes_id=?
Hibernate: 
    /* delete for notes.ressources.Note */delete 
    from
        Note 
    where
        id=?
HTTP/1.1 204 No Content
Date: Fri, 31 May 2024 14:20:43 GMT
Content-Type: application/json
]]></system-out>
  </testcase>
  <testcase name="deleteUser" classname="notes.EndpointTest" time="0.265">
    <system-out><![CDATA[Hibernate: 
    /* DELETE 
    FROM
        Note n */ delete 
    from
        Note_users
Hibernate: 
    /* DELETE 
    FROM
        Note n */ delete 
    from
        Note
Hibernate: 
    /* dynamic native SQL query */ ALTER SEQUENCE note_id_seq RESTART WITH 1
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* DELETE 
    FROM
        User */ delete 
    from
        Note_users
Hibernate: 
    /* DELETE 
    FROM
        User */ delete 
    from
        user_roles
Hibernate: 
    /* DELETE 
    FROM
        User */ delete 
    from
        users
Hibernate: 
    /* DELETE 
    FROM
        Role */ delete 
    from
        user_roles
Hibernate: 
    /* DELETE 
    FROM
        Role */ delete 
    from
        role
Hibernate: 
    /* insert for
        notes.ressources.Role */insert 
    into
        role (name) 
    values
        (?)
Hibernate: 
    /* insert for
        notes.ressources.Role */insert 
    into
        role (name) 
    values
        (?)
Hibernate: 
    /* insert for
        notes.ressources.User */insert 
    into
        users (password,email) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.User */insert 
    into
        users (password,email) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note.users */insert 
    into
        Note_users (notes_id,users_email) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note.users */insert 
    into
        Note_users (notes_id,users_email) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.User.roles */insert 
    into
        user_roles (user_name,role_name) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.User.roles */insert 
    into
        user_roles (user_name,role_name) 
    values
        (?,?)
USER IN LOGIN: UserDTO(email=admin, password=admin, roles=null)
Hibernate: 
    select
        u1_0.email,
        n1_0.users_email,
        n1_1.id,
        n1_1.category,
        n1_1.content,
        n1_1.date,
        n1_1.lastEditDate,
        n1_1.title,
        u1_0.password,
        r1_0.user_name,
        r1_1.name 
    from
        users u1_0 
    left join
        (Note_users n1_0 
    join
        Note n1_1 
            on n1_1.id=n1_0.notes_id) 
                on u1_0.email=n1_0.users_email 
        left join
            (user_roles r1_0 
        join
            role r1_1 
                on r1_1.name=r1_0.role_name) 
                    on u1_0.email=r1_0.user_name 
            where
                u1_0.email=?
Hibernate: 
    select
        u1_0.role_name,
        u1_1.email,
        n1_0.users_email,
        n1_1.id,
        n1_1.category,
        n1_1.content,
        n1_1.date,
        n1_1.lastEditDate,
        n1_1.title,
        u1_1.password 
    from
        user_roles u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.user_name 
    left join
        (Note_users n1_0 
    join
        Note n1_1 
            on n1_1.id=n1_0.notes_id) 
                on u1_1.email=n1_0.users_email 
        where
            u1_0.role_name=?
USER IN AUTHENTICATE: UserDTO(email=admin, password=null, roles=[, admin])
USER IN CHECK_SEC_ROLES: UserDTO(email=admin, password=null, roles=[, admin])
Hibernate: 
    select
        u1_0.email,
        n1_0.users_email,
        n1_1.id,
        n1_1.category,
        n1_1.content,
        n1_1.date,
        n1_1.lastEditDate,
        n1_1.title,
        u1_0.password,
        r1_0.user_name,
        r1_1.name 
    from
        users u1_0 
    left join
        (Note_users n1_0 
    join
        Note n1_1 
            on n1_1.id=n1_0.notes_id) 
                on u1_0.email=n1_0.users_email 
        left join
            (user_roles r1_0 
        join
            role r1_1 
                on r1_1.name=r1_0.role_name) 
                    on u1_0.email=r1_0.user_name 
            where
                u1_0.email=?
Hibernate: 
    select
        u1_0.notes_id,
        u1_1.email,
        u1_1.password,
        r1_0.user_name,
        r1_1.name 
    from
        Note_users u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.users_email 
    left join
        (user_roles r1_0 
    join
        role r1_1 
            on r1_1.name=r1_0.role_name) 
                on u1_1.email=r1_0.user_name 
        where
            u1_0.notes_id=?
Hibernate: 
    select
        u1_0.role_name,
        u1_1.email,
        n1_0.users_email,
        n1_1.id,
        n1_1.category,
        n1_1.content,
        n1_1.date,
        n1_1.lastEditDate,
        n1_1.title,
        u1_1.password 
    from
        user_roles u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.user_name 
    left join
        (Note_users n1_0 
    join
        Note n1_1 
            on n1_1.id=n1_0.notes_id) 
                on u1_1.email=n1_0.users_email 
        where
            u1_0.role_name=?
Hibernate: 
    select
        u1_0.notes_id,
        u1_1.email,
        u1_1.password,
        r1_0.user_name,
        r1_1.name 
    from
        Note_users u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.users_email 
    left join
        (user_roles r1_0 
    join
        role r1_1 
            on r1_1.name=r1_0.role_name) 
                on u1_1.email=r1_0.user_name 
        where
            u1_0.notes_id=?
Hibernate: 
    /* one-shot delete for notes.ressources.Note.users */delete 
    from
        Note_users 
    where
        notes_id=?
Hibernate: 
    /* one-shot delete for notes.ressources.User.roles */delete 
    from
        user_roles 
    where
        user_name=?
Hibernate: 
    /* one-shot delete for notes.ressources.Note.users */delete 
    from
        Note_users 
    where
        notes_id=?
Hibernate: 
    /* delete for notes.ressources.User */delete 
    from
        users 
    where
        email=?
Hibernate: 
    /* delete for notes.ressources.Note */delete 
    from
        Note 
    where
        id=?
Hibernate: 
    /* delete for notes.ressources.Note */delete 
    from
        Note 
    where
        id=?
HTTP/1.1 204 No Content
Date: Fri, 31 May 2024 14:20:43 GMT
Content-Type: application/json
]]></system-out>
  </testcase>
  <testcase name="getUserById" classname="notes.EndpointTest" time="0.238">
    <system-out><![CDATA[Hibernate: 
    /* DELETE 
    FROM
        Note n */ delete 
    from
        Note_users
Hibernate: 
    /* DELETE 
    FROM
        Note n */ delete 
    from
        Note
Hibernate: 
    /* dynamic native SQL query */ ALTER SEQUENCE note_id_seq RESTART WITH 1
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note */insert 
    into
        Note (category,content,date,lastEditDate,title) 
    values
        (?,?,?,?,?)
Hibernate: 
    /* DELETE 
    FROM
        User */ delete 
    from
        Note_users
Hibernate: 
    /* DELETE 
    FROM
        User */ delete 
    from
        user_roles
Hibernate: 
    /* DELETE 
    FROM
        User */ delete 
    from
        users
Hibernate: 
    /* DELETE 
    FROM
        Role */ delete 
    from
        user_roles
Hibernate: 
    /* DELETE 
    FROM
        Role */ delete 
    from
        role
Hibernate: 
    /* insert for
        notes.ressources.Role */insert 
    into
        role (name) 
    values
        (?)
Hibernate: 
    /* insert for
        notes.ressources.Role */insert 
    into
        role (name) 
    values
        (?)
Hibernate: 
    /* insert for
        notes.ressources.User */insert 
    into
        users (password,email) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.User */insert 
    into
        users (password,email) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note.users */insert 
    into
        Note_users (notes_id,users_email) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.Note.users */insert 
    into
        Note_users (notes_id,users_email) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.User.roles */insert 
    into
        user_roles (user_name,role_name) 
    values
        (?,?)
Hibernate: 
    /* insert for
        notes.ressources.User.roles */insert 
    into
        user_roles (user_name,role_name) 
    values
        (?,?)
USER IN LOGIN: UserDTO(email=admin, password=admin, roles=null)
Hibernate: 
    select
        u1_0.email,
        n1_0.users_email,
        n1_1.id,
        n1_1.category,
        n1_1.content,
        n1_1.date,
        n1_1.lastEditDate,
        n1_1.title,
        u1_0.password,
        r1_0.user_name,
        r1_1.name 
    from
        users u1_0 
    left join
        (Note_users n1_0 
    join
        Note n1_1 
            on n1_1.id=n1_0.notes_id) 
                on u1_0.email=n1_0.users_email 
        left join
            (user_roles r1_0 
        join
            role r1_1 
                on r1_1.name=r1_0.role_name) 
                    on u1_0.email=r1_0.user_name 
            where
                u1_0.email=?
Hibernate: 
    select
        u1_0.role_name,
        u1_1.email,
        n1_0.users_email,
        n1_1.id,
        n1_1.category,
        n1_1.content,
        n1_1.date,
        n1_1.lastEditDate,
        n1_1.title,
        u1_1.password 
    from
        user_roles u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.user_name 
    left join
        (Note_users n1_0 
    join
        Note n1_1 
            on n1_1.id=n1_0.notes_id) 
                on u1_1.email=n1_0.users_email 
        where
            u1_0.role_name=?
USER IN AUTHENTICATE: UserDTO(email=admin, password=null, roles=[, admin])
USER IN CHECK_SEC_ROLES: UserDTO(email=admin, password=null, roles=[, admin])
Hibernate: 
    select
        u1_0.email,
        n1_0.users_email,
        n1_1.id,
        n1_1.category,
        n1_1.content,
        n1_1.date,
        n1_1.lastEditDate,
        n1_1.title,
        u1_0.password,
        r1_0.user_name,
        r1_1.name 
    from
        users u1_0 
    left join
        (Note_users n1_0 
    join
        Note n1_1 
            on n1_1.id=n1_0.notes_id) 
                on u1_0.email=n1_0.users_email 
        left join
            (user_roles r1_0 
        join
            role r1_1 
                on r1_1.name=r1_0.role_name) 
                    on u1_0.email=r1_0.user_name 
            where
                u1_0.email=?
Hibernate: 
    select
        u1_0.notes_id,
        u1_1.email,
        u1_1.password,
        r1_0.user_name,
        r1_1.name 
    from
        Note_users u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.users_email 
    left join
        (user_roles r1_0 
    join
        role r1_1 
            on r1_1.name=r1_0.role_name) 
                on u1_1.email=r1_0.user_name 
        where
            u1_0.notes_id=?
Hibernate: 
    select
        u1_0.role_name,
        u1_1.email,
        n1_0.users_email,
        n1_1.id,
        n1_1.category,
        n1_1.content,
        n1_1.date,
        n1_1.lastEditDate,
        n1_1.title,
        u1_1.password 
    from
        user_roles u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.user_name 
    left join
        (Note_users n1_0 
    join
        Note n1_1 
            on n1_1.id=n1_0.notes_id) 
                on u1_1.email=n1_0.users_email 
        where
            u1_0.role_name=?
Hibernate: 
    select
        u1_0.notes_id,
        u1_1.email,
        u1_1.password,
        r1_0.user_name,
        r1_1.name 
    from
        Note_users u1_0 
    join
        users u1_1 
            on u1_1.email=u1_0.users_email 
    left join
        (user_roles r1_0 
    join
        role r1_1 
            on r1_1.name=r1_0.role_name) 
                on u1_1.email=r1_0.user_name 
        where
            u1_0.notes_id=?
HTTP/1.1 200 OK
Date: Fri, 31 May 2024 14:20:43 GMT
Content-Type: application/json
Content-Length: 107

{"email":"user","password":"$2a$10$4GKN1RYu5V4/tVn9i/ezDe6zAKK.h0Mn46gogGgKoPEWLb0OnCWQe","roles":["user"]}
]]></system-out>
  </testcase>
</testsuite>